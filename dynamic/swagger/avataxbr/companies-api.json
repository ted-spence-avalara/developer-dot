{
  "swagger": "2.0",
  "info": {
    "title": "AvaTax Brazil",
    "description": "The Avatax-Brazil API exposes the most commonly services available for interacting \nwith the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic\ninvoice documents and modifying existing transactions when allowed by tax authorities.\nThis API is exclusively for use by business with a physical presence in Brazil.\n",
    "version": "1.0"
  },
  "host": "avataxbr-sandbox.avalarabrasil.com.br",
  "x-swagger-namespace": "DB",
  "schemes": [
    "http"
  ],
  "produces": [
    "application/json"
  ],
  "basePath": "/v2",
  "paths": {
    "/companies": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "get": {
        "operationId": "infoCompany",
        "summary": "Get company information and your data configuration",
        "description": "This method operation get a company for a account\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Company"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/Company"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompany",
        "summary": "Update company information and your data configuration",
        "description": "This method operation create a company for a account\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Company"
            }
          }
        ],
        "tags": [
          "Company"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompany",
        "description": "Delete Company",
        "tags": [
          "Company"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/locations": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "get": {
        "operationId": "getCompanyLocationsList",
        "description": "This operation return all locations\n",
        "tags": [
          "Company Location"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Locations",
              "type": "array",
              "items": {
                "$ref": "#/definitions/Location"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createLocation",
        "summary": "Create new location for company",
        "description": "This method operation create a new location for company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "tags": [
          "Company Location"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/locations/{code}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_locationCode"
        }
      ],
      "get": {
        "operationId": "getCompanyLocation",
        "description": "This operation return location\n",
        "tags": [
          "Company Location"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/Location"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateLocation",
        "summary": "Update location for company",
        "description": "This method operation update a location for company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Location"
            }
          }
        ],
        "tags": [
          "Company Location"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteLocation",
        "description": "Delete location",
        "tags": [
          "Company Location"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/agasts?service": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "name": "text",
          "in": "query",
          "description": "Text query",
          "type": "string",
          "maxLength": 40
        }
      ],
      "get": {
        "operationId": "getCompanyAgastListService",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          },
          {
            "$ref": "#/parameters/query_agastCode"
          },
          {
            "$ref": "#/parameters/query_agastParent"
          },
          {
            "$ref": "#/parameters/query_textQuery"
          }
        ],
        "tags": [
          "Company AGAST Service"
        ],
        "responses": {
          "200": {
            "description": "Sucessful response",
            "schema": {
              "title": "List of AGASTS",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Item description"
                  },
                  "id": {
                    "type": "string",
                    "description": "uuid"
                  },
                  "code": {
                    "type": "string",
                    "description": "Company item code"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createCompanyAgastService",
        "summary": "Create custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyAgastService"
            }
          }
        ],
        "tags": [
          "Company AGAST Service"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/agasts/{code}?Service": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_agastCode"
        }
      ],
      "get": {
        "operationId": "getCompanyAgastService",
        "description": "This operation return custom agast configurations that match with parameters queries - Alannes.\n",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "Agast parent code, means that this agast is a specialization of parent agast\n",
            "type": "string",
            "maxLength": 60
          }
        ],
        "tags": [
          "Company AGAST Service"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CompanyAgastService"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyAgastService",
        "summary": "Update custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyAgastService"
            }
          }
        ],
        "tags": [
          "Company AGAST Service"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyAgastService",
        "description": "Delete Company Agast",
        "tags": [
          "Company AGAST Service"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/agasts?goods": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "name": "text",
          "in": "query",
          "description": "Text query",
          "type": "string",
          "maxLength": 40
        }
      ],
      "get": {
        "operationId": "getCompanyAgastListGoods",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          },
          {
            "$ref": "#/parameters/query_agastCode"
          },
          {
            "$ref": "#/parameters/query_agastParent"
          },
          {
            "$ref": "#/parameters/query_textQuery"
          }
        ],
        "tags": [
          "Company AGAST Goods"
        ],
        "responses": {
          "200": {
            "description": "Sucessful response",
            "schema": {
              "title": "List of AGASTS",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "description": {
                    "type": "string",
                    "description": "Item description"
                  },
                  "id": {
                    "type": "string",
                    "description": "uuid"
                  },
                  "code": {
                    "type": "string",
                    "description": "Company item code"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createCompanyAgastGoods",
        "summary": "Create custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyAgastGoods"
            }
          }
        ],
        "tags": [
          "Company AGAST Goods"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/agasts/{code}?goods": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_agastCode"
        }
      ],
      "get": {
        "operationId": "getCompanyAgastGoods",
        "description": "This operation return custom agast configurations that match with parameters queries - Alannes.\n",
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "description": "Agast parent code, means that this agast is a specialization of parent agast\n",
            "type": "string",
            "maxLength": 60
          }
        ],
        "tags": [
          "Company AGAST Goods"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CompanyAgastGoods"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyAgastGoods",
        "summary": "Update custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyAgastGoods"
            }
          }
        ],
        "tags": [
          "Company AGAST Goods"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyAgastGoods",
        "description": "Delete Company Agast",
        "tags": [
          "Company AGAST Goods"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/taxrates": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "get": {
        "operationId": "getCompanyTaxRatesList",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "tags": [
          "Company Tax Rates"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Company Tax Type Rates",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyTaxTypeRate"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createCompanyTaxes",
        "summary": "Create custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyTaxTypeRate"
            }
          }
        ],
        "tags": [
          "Company Tax Rates"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/taxrates/{taxType}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_taxType"
        }
      ],
      "get": {
        "operationId": "getCompanyCompanyTax",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "tags": [
          "Company Tax Rates"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CompanyTaxTypeRate"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyTaxes",
        "summary": "Update custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyTaxTypeRate"
            }
          }
        ],
        "tags": [
          "Company Tax Rates"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyTaxes",
        "description": "Delete Company Tax",
        "tags": [
          "Company Tax Rates"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/items?goods": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/header_AvaTypeGoods"
        }
      ],
      "get": {
        "operationId": "getCompanyItemsGoodsList",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          },
          {
            "$ref": "#/parameters/query_itemCode"
          },
          {
            "$ref": "#/parameters/query_agastCode"
          },
          {
            "$ref": "#/parameters/query_textQuery"
          }
        ],
        "tags": [
          "Company Item (Goods)"
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Company Item",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemGoods"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createItem",
        "summary": "Create custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemGoods"
            }
          }
        ],
        "tags": [
          "Company Item (Goods)"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/items/{code}/change-code": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_itemCode"
        },
        {
          "name": "goods",
          "in": "query",
          "description": "Provide to apply to goods items.",
          "type": "string"
        },
        {
          "name": "service",
          "in": "query",
          "description": "Provide to apply to service items.",
          "type": "string"
        }
      ],
      "put": {
        "operationId": "companyItemsChangeCode",
        "description": "Change the code of a given item.\n",
        "tags": [
          "Company Item (Goods)",
          "Company Item (Service)"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Requisition",
            "required": true,
            "schema": {
              "required": [
                "newCode"
              ],
              "properties": {
                "newCode": {
                  "description": "Destination code.",
                  "type": "string",
                  "maxLength": 60
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/items/{code}?goods": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_itemCode"
        },
        {
          "$ref": "#/parameters/header_AvaTypeGoods"
        }
      ],
      "get": {
        "operationId": "getCompanyItemsGoods",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/query_agastCode"
          }
        ],
        "tags": [
          "Company Item (Goods)"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ItemGoods"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateItem",
        "summary": "Update custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemGoods"
            }
          }
        ],
        "tags": [
          "Company Item (Goods)"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteItem",
        "description": "Delete Item",
        "tags": [
          "Company Item (Goods)"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/items?service": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/header_AvaTypeService"
        }
      ],
      "get": {
        "operationId": "getCompanyItemsServiceList",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          },
          {
            "$ref": "#/parameters/query_itemCode"
          },
          {
            "$ref": "#/parameters/query_agastCode"
          },
          {
            "$ref": "#/parameters/query_textQuery"
          }
        ],
        "tags": [
          "Company Item (Service)"
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Company Item",
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemService"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createItemService",
        "summary": "Create custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemService"
            }
          }
        ],
        "tags": [
          "Company Item (Service)"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/items/{code}?service": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_itemCode"
        },
        {
          "$ref": "#/parameters/header_AvaTypeService"
        }
      ],
      "get": {
        "operationId": "getCompanyItemsService",
        "description": "This operation return custom agast configurations that match with parameters queries\n",
        "parameters": [
          {
            "$ref": "#/parameters/query_agastCode"
          }
        ],
        "tags": [
          "Company Item (Service)"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/ItemService"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateItemService",
        "summary": "Update custom agast for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ItemService"
            }
          }
        ],
        "tags": [
          "Company Item (Service)"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteItemService",
        "description": "Delete Item - Service",
        "tags": [
          "Company Item (Service)"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/icms": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "get": {
        "operationId": "getCompanyICMSList",
        "description": "This operation return custom ICMS configurations that match with parameters queries\n",
        "tags": [
          "Company ICMS"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Company Item",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyIcmsConfByState"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createICMS",
        "summary": "Create custom ICMS tax for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyIcmsConfByState"
            }
          }
        ],
        "tags": [
          "Company ICMS"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/icms/{state}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_stateAbbr"
        }
      ],
      "get": {
        "operationId": "getCompanyICMS",
        "description": "This operation return custom ICMS configurations that match with parameters queries\n",
        "tags": [
          "Company ICMS"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CompanyIcmsConfByState"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyIcmsConfByState",
        "summary": "Update custom agast for one company",
        "description": "This method operation update a custom ICMS tax for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyIcmsConfByState"
            }
          }
        ],
        "tags": [
          "Company ICMS"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyIcmsConfByState",
        "description": "Delete ICMS Config",
        "tags": [
          "Company ICMS"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/process": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "name": "text",
          "in": "query",
          "description": "Text query",
          "type": "string",
          "maxLength": 40
        }
      ],
      "get": {
        "operationId": "getCompanyProcessList",
        "description": "This operation return custom process configurations that match with parameters queries\n",
        "tags": [
          "Company Process"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/header_listLimit"
          },
          {
            "$ref": "#/parameters/header_listPage"
          },
          {
            "$ref": "#/parameters/header_listSort"
          },
          {
            "$ref": "#/parameters/query_textQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Success response",
            "headers": {
              "X-Pagination-Current-Page": {
                "description": "The current page. Defaults to 1.",
                "type": "number"
              },
              "X-Pagination-Limit": {
                "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
                "type": "number"
              },
              "X-Pagination-Total-Pages": {
                "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
                "type": "number"
              },
              "X-Pagination-Total-Count": {
                "description": "The total number of records across all pages.",
                "type": "number"
              }
            },
            "schema": {
              "title": "Array of Company Process",
              "type": "array",
              "items": {
                "$ref": "#/definitions/CompanyProcessScenario"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "post": {
        "operationId": "createCompanyProcessScenario",
        "summary": "Create custom process tax for one company",
        "description": "This method operation create a custom agast for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyProcessScenario"
            }
          }
        ],
        "tags": [
          "Company Process"
        ],
        "responses": {
          "201": {
            "$ref": "#/responses/201_Created"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/process/{code}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_processCode"
        }
      ],
      "get": {
        "operationId": "getCompanyProcess",
        "description": "This operation return custom process configurations that match with parameters queries\n",
        "tags": [
          "Company Process"
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "$ref": "#/definitions/CompanyProcessScenario"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyProcessScenario",
        "summary": "Update custom agast for one company",
        "description": "This method operation update a custom process for one company\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyProcessScenario"
            }
          }
        ],
        "tags": [
          "Company Process"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyProcessScenario",
        "description": "Delete Company Process",
        "tags": [
          "Company Process"
        ],
        "responses": {
          "204": {
            "$ref": "#/responses/204_NoContent"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/companies/certificate": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "postCompanyServiceCertificate",
        "description": "If it still not exists, uploads a new Certificate file for this company.\nSend the file as a base64 string.\n",
        "tags": [
          "Company Files"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Content",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "companyId": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "put": {
        "operationId": "updateCompanyServiceCertificate",
        "description": "Updates an existing certificate file for this company.\nSend the file as a base64 string.\n",
        "tags": [
          "Company Files"
        ],
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Content",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "content": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "schema": {
              "type": "object",
              "properties": {
                "companyId": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "get": {
        "operationId": "getCompanyServiceCertificate",
        "description": "Gets an existing certificate file for this company.\n",
        "tags": [
          "Company Files"
        ],
        "produces": [
          "application/octet-stream"
        ],
        "parameters": [
          {
            "name": "peek",
            "type": "number",
            "in": "query",
            "description": "Use this parameter to check the existence of the file without downloading it."
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      },
      "delete": {
        "operationId": "deleteCompanyServiceCertificate",
        "description": "Deletes a company file store.\n",
        "tags": [
          "Company Files"
        ],
        "responses": {
          "200": {
            "description": "Successful response"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    }
  },
  "parameters": {
    "header_jwt": {
      "name": "Authorization",
      "in": "header",
      "description": "Bearer {auth}",
      "required": true,
      "type": "string"
    },
    "path_cityCode": {
      "name": "cityCode",
      "in": "path",
      "description": "City Code",
      "required": true,
      "type": "number"
    },
    "path_agastCode": {
      "name": "code",
      "in": "path",
      "description": "Agast Code",
      "required": true,
      "type": "string",
      "maxLength": 60
    },
    "path_itemCode": {
      "name": "code",
      "in": "path",
      "description": "Item Code",
      "required": true,
      "type": "string",
      "maxLength": 60
    },
    "path_locationCode": {
      "name": "code",
      "in": "path",
      "description": "Location Code",
      "required": true,
      "type": "string"
    },
    "path_processCode": {
      "name": "code",
      "in": "path",
      "description": "Process Code",
      "required": true,
      "type": "string"
    },
    "path_taxType": {
      "name": "taxType",
      "in": "path",
      "description": "Tax Type",
      "required": true,
      "type": "string",
      "enum": [
        "inss",
        "inss-rf",
        "irrf",
        "pis",
        "pis-rf",
        "cofins",
        "cofins-rf",
        "csll",
        "csll-rf",
        "irpj",
        "iss",
        "iss-rf",
        "ipi"
      ]
    },
    "path_stateAbbr": {
      "name": "state",
      "in": "path",
      "description": "Brazilian State",
      "required": true,
      "type": "string",
      "enum": [
        "ac",
        "al",
        "am",
        "ap",
        "ba",
        "ce",
        "df",
        "es",
        "go",
        "ma",
        "mg",
        "ms",
        "mt",
        "pa",
        "pb",
        "pe",
        "pi",
        "pr",
        "rj",
        "rn",
        "ro",
        "rr",
        "rs",
        "sc",
        "se",
        "sp",
        "to"
      ],
      "maxLength": 2
    },
    "query_agastCode": {
      "name": "agast",
      "in": "query",
      "description": "Custom Agast Code",
      "type": "string",
      "maxLength": 60
    },
    "query_agastParent": {
      "name": "parent",
      "in": "query",
      "description": "Agast Code",
      "type": "string",
      "maxLength": 60
    },
    "query_itemCode": {
      "name": "code",
      "in": "query",
      "description": "Item Code",
      "type": "string",
      "maxLength": 60
    },
    "query_textQuery": {
      "name": "text",
      "in": "query",
      "description": "Performs text search.",
      "type": "string",
      "maxLength": 40
    },
    "header_AvaTypeGoods": {
      "name": "Avalara-Product-Type",
      "in": "header",
      "description": "Avalara Product Type",
      "type": "string",
      "enum": [
        "goods",
        "service"
      ],
      "default": "goods",
      "required": true
    },
    "header_AvaTypeService": {
      "name": "Avalara-Product-Type",
      "in": "header",
      "description": "Avalara Product Type",
      "type": "string",
      "enum": [
        "goods",
        "service"
      ],
      "default": "service"
    },
    "header_listLimit": {
      "name": "X-Pagination-Limit",
      "in": "header",
      "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
      "type": "integer",
      "format": "int32",
      "default": 10,
      "minimum": 5
    },
    "header_listPage": {
      "name": "X-Pagination-Current-Page",
      "in": "header",
      "type": "integer",
      "format": "int32",
      "description": "The current page. Defaults to 1.",
      "default": 1,
      "minimum": 1
    },
    "header_listSort": {
      "name": "X-Pagination-Sort",
      "in": "header",
      "type": "string",
      "format": "-?\\w+"
    }
  },
  "responses": {
    "200_SuccessList": {
      "description": "Success response",
      "headers": {
        "X-Pagination-Current-Page": {
          "description": "The current page. Defaults to 1.",
          "type": "number"
        },
        "X-Pagination-Limit": {
          "description": "The per page limit. Currently set to 10 but subject to change at any time (max 100).",
          "type": "number"
        },
        "X-Pagination-Total-Pages": {
          "description": "The total number of pages in the result set. Use this along with X-Pagination-Current-Page to determine if there are any remaining pages/records to be retrieved.",
          "type": "number"
        },
        "X-Pagination-Total-Count": {
          "description": "The total number of records across all pages.",
          "type": "number"
        }
      }
    },
    "201_Created": {
      "description": "Success.",
      "schema": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "uuid"
          }
        }
      }
    },
    "204_NoContent": {
      "description": "Success."
    },
    "400_BadRequest": {
      "description": "The request was invalid or cannot be otherwise served.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    },
    "401_Unauthorized": {
      "description": "Authentication credentials were missing or incorrect.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_Forbidden": {
      "description": "The request is understood, but it has been refused or access is not allowed.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "404_NotFound": {
      "description": "The URI requested is invalid or the resource requested does not exists.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "429_TooManyRequests": {
      "description": "The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "500_InternalServerError": {
      "description": "Something is broken.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "503_ServiceUnavailable": {
      "description": "The server is up, but overloaded with requests. Try again later.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  },
  "definitions": {
    "Company": {
      "type": "object",
      "required": [
        "code",
        "officialName",
        "name",
        "entityType",
        "federalTaxRegime"
      ],
      "properties": {
        "code": {
          "type": "string",
          "maxLength": 60,
          "description": "string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company"
        },
        "officialName": {
          "type": "string",
          "maxLength": 150,
          "description": "Official Company name (Razão Social)"
        },
        "name": {
          "type": "string",
          "maxLength": 150,
          "description": "Company name (DBA - Nome de Fantasia),  Used to identify branches/subsidiaries with same name"
        },
        "entityType": {
          "$ref": "#/definitions/EntityType"
        },
        "subjectToSRF1234": {
          "type": "boolean",
          "description": "Company has participation of state-owned capital (it will be considerated like a government entity)"
        },
        "federalTaxRegime": {
          "$ref": "#/definitions/FederalTaxRegime"
        },
        "pisSubjectTo": {
          "type": "string",
          "enum": [
            "TAXABLE",
            "NOT TAXABLE",
            "EXEMPT"
          ],
          "description": "this flag informs if this company is subject to this tax\nthe default value for this property is TAXABLE,\nwhen set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions\nwhen set to NOT TAXABLE or EXEMPT, the system will not analise other rules.\n"
        },
        "cofinsSubjectTo": {
          "type": "string",
          "enum": [
            "TAXABLE",
            "NOT TAXABLE",
            "EXEMPT"
          ],
          "description": "this flag informs if this company is subject to this tax\nthe default value for this property is TAXABLE,\nwhen set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions\nwhen set to NOT TAXABLE or EXEMPT, the system will not analise other rules.\n"
        },
        "csllSubjectTo": {
          "type": "string",
          "enum": [
            "TAXABLE",
            "NOT TAXABLE",
            "EXEMPT"
          ],
          "description": "this flag informs if this company is subject to this tax\nthe default value for this property is TAXABLE,\nwhen set to TAXABLE it doesn't mean that all transaction will be TAXABLE. The system will analise other rules to identify exemptions/exceptions\nwhen set to NOT TAXABLE or EXEMPT, the system will not analise other rules.\n"
        },
        "receiptsAreFullNoCumulativePisCofins": {
          "type": "boolean",
          "description": "When th company is REAL PROFIT usually it operates under a Non-Cumulative PIS/COFINS regime\nBut exist some services that are always Cumulative regime.\nIf the company has all receipts from Non-Cumulative services this flag will be set to True.\nThis flag informs special conditions to credit of PIS/COFINS when this company is out of Free zone and  purchases from Free Zone Company\nQuando uma empresa fora da Zona Franca adquire uma produto ou serviço de uma empresa situada na Zona Franca de Manaus, o crédito de PIS E COFINS segue estas aliquotas diferenciadas.\nFundamentação, art. 5º da Instrução Normativa SRF nº 546/2005; art. 3º, § 12 da Lei nº 10.637/2002; art. 3º, § 17 da Lei nº 10.833/2003; art. 4º da Lei nº 11.307/2006.\nDESTINATÁRIO ALÍQUOTAS.\nPIS COFINS\na) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure a Contribuição para o PIS/PASEP no regime de não-cumulatividade débito 0,65% 3% crédito 1% 4,6%\nc) Venda efetuada a pessoa jurídica estabelecida fora da Zona Franca de Manaus, que apure o imposto de renda com base no lucro real e que tenha sua receita, total ou parcialmente, excluída do regime de incidência não-cumulativa da Contribuição para o PIS/PASEP débito 1,3% 6% crédito 1,65% 7,6%\n"
        },
        "inssWithholdSubjectTo": {
          "type": "boolean",
          "description": "On purchase transaction, to force withholding INSS this Flag can be set to True"
        },
        "issWithholdSubjectTo": {
          "type": "boolean",
          "description": "On purchase transaction, to force withhold ISS this Flag can be set to True"
        },
        "irrfWithholdSubjectTo": {
          "type": "boolean",
          "description": "On purchase transaction, if this flag is FALSE, the system will not withhold IRRF.\nif this flag is TRUE the system will analise other rules to define if will have witholding\n"
        },
        "icmsRateForSimplestaxregime": {
          "type": "number",
          "format": "double",
          "description": "Actual ICMS Rate for this company (if the company is Tax Regime Simplified).\nAliquota de ICMS da companhia caso Optante do Simples\n"
        },
        "isExemptByGrossRevenueForSimplestaxregime": {
          "type": "boolean",
          "description": "ICMS Exempt when Tax Regime is Simplified because total gross revenue is bellow amount defined by state (see PARANÁ State)\nIsenção do ICMS no Simples Nacional para faixa de receita bruta\n"
        },
        "subjectToPayrollTaxRelief": {
          "type": "boolean",
          "description": "Sujeito à desoneração de folha de pagamento."
        },
        "configuration": {
          "type": "object",
          "properties": {
            "certificate": {
              "type": "string",
              "description": "digital certificate A1 model, p12, encoded by base64"
            },
            "certificatepwd": {
              "type": "string",
              "description": "certificate password"
            },
            "certificateexpiration": {
              "type": "string",
              "description": "expiration date of this certificate"
            },
            "logo": {
              "type": "string",
              "description": "company logo image encoded by base64"
            },
            "tpImpNFe": {
              "type": "string",
              "description": "how the document will be printed\n- '0' # without DANFE;\n- '1' # DANFe Letter;\n- '2' # DANFe Landscape;\n",
              "enum": [
                "0",
                "1",
                "2"
              ]
            },
            "tpImpNFCe": {
              "type": "string",
              "description": "how the document will be printed\n- '0' # without DANFE;\n- '4' # DANFe NFC-e;\n- '5' # DANFe NFC-e e-mail\n",
              "enum": [
                "0",
                "4",
                "5"
              ]
            }
          }
        },
        "mailServer": {
          "type": "object",
          "properties": {
            "user": {
              "type": "string",
              "description": "User for login on email server"
            },
            "password": {
              "type": "string",
              "description": "Password to login on email server"
            },
            "smtpAddress": {
              "type": "string",
              "description": "smtp address to email server"
            },
            "port": {
              "type": "integer",
              "description": "port"
            },
            "emailFrom": {
              "type": "string",
              "description": "email address to identify the sender e-mail, to send a XML and DANFE"
            },
            "protocol": {
              "type": "string",
              "enum": [
                "ssl",
                "tls"
              ],
              "description": "protocol SSL or TLS"
            },
            "templatemessageToEmail": {
              "type": "string",
              "description": "Message to add to email body"
            }
          }
        },
        "authorizedToDownloadNFe": {
          "description": "Person or company authorized to downloadNFe",
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "federalTaxId": {
                "type": "string",
                "pattern": "[0-9]{11,14}",
                "description": "Federal tax id, CNPJ or CPF"
              }
            }
          }
        }
      }
    },
    "CompanyAgastGoods": {
      "allOf": [
        {
          "$ref": "#/definitions/AgastGoods"
        },
        {
          "type": "object",
          "required": [
            "companyId"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        }
      ]
    },
    "CompanyAgastService": {
      "allOf": [
        {
          "$ref": "#/definitions/AgastService"
        },
        {
          "type": "object",
          "required": [
            "companyId"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        }
      ]
    },
    "CompanyIcmsConfByState": {
      "allOf": [
        {
          "$ref": "#/definitions/IcmsConfByState"
        },
        {
          "type": "object",
          "required": [
            "companyId"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        }
      ]
    },
    "CompanyProcessScenario": {
      "allOf": [
        {
          "$ref": "#/definitions/ProcessScenario"
        },
        {
          "type": "object",
          "required": [
            "companyId"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        }
      ]
    },
    "CompanyTaxTypeRate": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxTypeRate"
        },
        {
          "type": "object",
          "required": [
            "companyId"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            }
          }
        }
      ]
    },
    "ItemGoods": {
      "allOf": [
        {
          "$ref": "#/definitions/ItemSimple"
        },
        {
          "type": "object",
          "properties": {
            "sealCode": {
              "type": "string",
              "maxLength": 60,
              "description": "Seal Code for ipi tax control (código do selo para controle de IPI)"
            },
            "nFCI": {
              "type": "string",
              "pattern": "[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}",
              "description": "Importation content form number (Número de controle da FCI - Ficha de Conteúdo de Importação)"
            },
            "isIcmsStSubstitute": {
              "type": "boolean",
              "description": "this field inform that this merchandise or product is ICMS Substitute\nMust be used when the item is for resale and the company will assume the role of ICMS Substitute (wholesaler, retailer, distributor). Example: when Importing some product the company does not pay IcmsSt at the time of customs clearance but when selling sale the item.\nDeverá ser utilizado quando a empresa que irá vender a mercadoria sujeita ao ICMS ST for o SUBSTITUTO TRIBUTÁRIO (Distribuidor, atacadista e varejista), como por exemplo das mercadorias IMPORTADAS, neste sentido, a empresa não irá pagar o ICMS ST no desembaraço aduaneiro e irá recolher quando for vender as mesmas.\n"
            },
            "source": {
              "description": "- '0' # National goods - except those treated in codes 3,4, 5 and 8\n- '1' # Foreign goods - Imported directly by seller, except those in code 6\n- '2' # Foreign goods - Acquired in the internal market (inside Brazil), except those in code 7\n- '3' # National goods - Merchandise or goods with imported content above 40% and with less than or equal to 70%\n- '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes)\n- '5' # National goods - Merchandise or goods with imported content equal or below 40%\n- '6' # Foreign goods - Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas\n- '7' # Foreign goods - Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas\n- '8' # National goods - Merchandise or goods with imported content above 70%\n",
              "type": "string",
              "enum": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8"
              ]
            },
            "productType": {
              "type": "string",
              "description": "Tipo fiscal do produto segundo tabela SPED\nFiscal product type by SPED list table\n- 'FOR PRODUCT' # 04  Produto Acabado\n- 'FOR MERCHANDISE' # 00  Mercadoria para Revenda\n- 'NO RESTRICTION' # 99 Outras\n- 'SERVICE' # 09  Serviços\n- 'FEEDSTOCK' # 01  Matéria-Prima\n- 'FIXED ASSETS' # 08 Ativo Imobilizado\n- 'PACKAGING' # 02 Embalagem\n- 'PRODUCT IN PROCESS' # 03  Produto em Processo\n- 'SUBPRODUCT' # 05  Subproduto\n- 'INTERMEDIATE PRODUCT' # 06  Produto Intermediário\n- 'MATERIAL FOR USAGE AND CONSUMPTION' # 07  Material de Uso e Consumo\n- 'OTHER INPUTS' # 10  Outros insumos\n",
              "enum": [
                "FOR PRODUCT",
                "FOR MERCHANDISE",
                "NO RESTRICTION",
                "SERVICE",
                "FEEDSTOCK",
                "FIXED ASSETS",
                "PACKAGING",
                "PRODUCT IN PROCESS",
                "SUBPRODUCT",
                "INTERMEDIATE PRODUCT",
                "MATERIAL FOR USAGE AND CONSUMPTION",
                "OTHER INPUTS"
              ]
            },
            "manufacturerEquivalent": {
              "type": "boolean",
              "description": "Item is merchandise but will be considered product"
            },
            "appropriateIPIcreditWhenInGoing": {
              "type": "boolean",
              "description": "Inform that this item will have rights to aprropriate IPI credit"
            },
            "appropriateICMScreditWhenInGoing": {
              "type": "boolean",
              "description": "Inform that this item will have rights to aprropriate IPI credit"
            },
            "usuallyAppropriatePISCOFINSCredit": {
              "type": "boolean",
              "description": "Subject to appropriate PIS/COFINS credit, when NO CUMULATIVE"
            },
            "isPisCofinsEstimatedCredit": {
              "type": "boolean",
              "description": "The credit PIS/COFINS is subject to purchase form companies, but exist some exceptions, when the credit will be a estimated amount"
            },
            "piscofinsRevenueType": {
              "description": "- '01' # Vinculada Exclusivamente a Receita Tributada no Mercado Interno\n- '02' # Exclusivamente a Receita Não Tributada no Mercado Interno\n- '03' # Exclusivamente a Receita de Exportação\n- '04' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno\n- '05' # Vinculada a Receitas Tributadas no Mercado Interno e de Exportação\n- '06' # Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação\n- '07' # Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação\n",
              "type": "string",
              "enum": [
                "01",
                "02",
                "03",
                "04",
                "05",
                "06",
                "07"
              ]
            },
            "icmsBaseDiscountForMonoPhaseSocialContr": {
              "type": "number",
              "format": "double",
              "description": "Discount allowed on icms base when PIS/COFINS are Monophase"
            },
            "cean": {
              "type": "string",
              "pattern": "[0-9]{0}|[0-9]{8}|[0-9]{12,14}",
              "description": "GTIN NUMBER"
            },
            "nve": {
              "type": "string",
              "pattern": "[A-Z]{2}[0-9]{4}",
              "description": "Nomenclatura de Valor aduaneio e Estatístico - NCM extension code"
            },
            "salesUnit": {
              "type": "string",
              "maxLength": 6
            },
            "salesUnitIPIfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert sales quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "salesUnitIcmsfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert sales quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "salesUnitIcmsStfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert sales quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "salesUnitPisCofinsfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert sales quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "purchaseUnit": {
              "type": "string",
              "maxLength": 6
            },
            "purchaseUnitIPIfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert purchase quantity to IPI taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "purchaseUnitIcmsfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert purchase quantity to ICMS taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "purchaseUnitIcmsStfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert purchase quantity to ICMS-ST taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "purchaseUnitPisCofinsfactor": {
              "type": "number",
              "format": "double",
              "description": "factor to convert purchase quantity to PIS/COFINS taxable quantity when it is by SRF Statutory Retail Price (Pauta)"
            },
            "firstUse": {
              "type": "boolean",
              "description": "When the product is new, and will be retail, firt time that it exit it is subject to IPI"
            }
          }
        }
      ]
    },
    "ItemService": {
      "allOf": [
        {
          "$ref": "#/definitions/ItemSimple"
        },
        {
          "type": "object",
          "required": [
            "cityTaxConf"
          ],
          "properties": {
            "withLaborAssignment": {
              "type": "boolean",
              "description": "Applies the \"is Labor Assignment\" tax scenario. (Cessão de mão de obra).\n"
            },
            "cityTaxConf": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ItemService_CityTaxConf"
              }
            }
          }
        }
      ]
    },
    "Location": {
      "allOf": [
        {
          "$ref": "#/definitions/Address"
        },
        {
          "title": "Location",
          "type": "object",
          "required": [
            "companyId",
            "code",
            "type"
          ],
          "properties": {
            "companyId": {
              "description": "Company ID",
              "type": "string",
              "format": "uuid",
              "maxLength": 36
            },
            "code": {
              "type": "string",
              "maxLength": 60,
              "description": "this property identify the location, it is unique for this company"
            },
            "type": {
              "type": "string",
              "enum": [
                "ShipFrom",
                "ShipTo",
                "ServiceRendered"
              ],
              "description": "this property identify the location, it is unique for this company"
            },
            "email": {
              "type": "string",
              "maxLength": 60,
              "description": "Email"
            },
            "federalTaxId": {
              "type": "string",
              "description": "Federal tax id, CNPJ or CPF"
            },
            "stateTaxId": {
              "type": "string",
              "pattern": "^(\\d{9,14}|ISENTO)$",
              "description": "state tax id for this location"
            },
            "secondaryStateTaxId": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "stateTaxId": {
                    "type": "string",
                    "pattern": "^(\\d{9,14}|ISENTO)$"
                  },
                  "state": {
                    "$ref": "#/definitions/StateEnum"
                  }
                }
              }
            },
            "cityTaxId": {
              "type": "string",
              "maxLength": 15,
              "description": "City Tax ID"
            },
            "suframa": {
              "type": "string",
              "pattern": "([0-9]{8,9})?"
            },
            "mainActivity": {
              "description": "Main location activity",
              "type": "string",
              "enum": [
                "commerce",
                "industry",
                "service"
              ]
            },
            "nfseProcessModel": {
              "description": "- 'edi' # City hall has web service and the integration is automatic\n- 'xml' # Create RPS specific to City, bat does not have webservice integration\n- 'rps' # Create a generic RPS, NF is by hands\n",
              "type": "string",
              "enum": [
                "edi",
                "xml",
                "rps"
              ]
            }
          }
        }
      ]
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "params",
            "body",
            "query"
          ]
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "EntityType": {
      "type": "string",
      "enum": [
        "business",
        "individual",
        "federalGovernment",
        "stateGovernment",
        "cityGovernment",
        "foreign"
      ],
      "description": "Entity Type (business, individual, federal government, state government, city government, foreign)"
    },
    "FederalTaxRegime": {
      "type": "string",
      "enum": [
        "realProfit",
        "estimatedProfit",
        "simplified",
        "simplifiedOverGrossthreshold",
        "simplifiedEntrepreneur",
        "notApplicable",
        "individual"
      ],
      "description": "- Federal tax regime\n- realProfit - REAL PROFIT LUCRO REAL\n- estimatedProfit - ESTIMATED PROFIT / LUCRO PRESUMIDO\n- simplified - SIMPLIFIED - OPTANTE TO SIMPLES\n- simplifiedOverGrossthreshold - OPTANTE DO SIMPLES COM LIMITE DE GROSS REVENUE\n- simplifiedEntrepreneur - SIMPLIFIED ENTREPRENEUR / MEI MICRO EMPREENDEDOR INDIVIDUAL \n- notApplicable - Not Applicable 1 \n- individual - INDIVIDUAL / INDIVIDUO\n"
    },
    "AgastGoods": {
      "title": "Service Agast Specialization",
      "allOf": [
        {
          "$ref": "#/definitions/Agast"
        },
        {
          "type": "object",
          "properties": {
            "ex": {
              "type": "integer",
              "description": "hsCode Exception for IPI tax"
            },
            "cest": {
              "type": "string",
              "pattern": "[0-9]{7}",
              "description": "tax substitution code - Codigo especificador da Substuicao Tributaria"
            },
            "cean": {
              "type": "string",
              "pattern": "[0-9]{0}|[0-9]{8}|[0-9]{12,14}",
              "description": "GTIN NUMBER"
            },
            "cstIPI": {
              "type": "string",
              "description": "Inform if this process is subject to IPI taxation on output process\n- 'T'  # TAXABLE\n- 'Z'  # TAXABLE WITH RATE=0.00\n- 'E'  # EXEMPT\n- 'N'  # NO TAXABLE\n- 'I'  # IMMUNE\n",
              "enum": [
                "T",
                "Z",
                "E",
                "N",
                "I"
              ]
            },
            "ipiLegalTaxClass": {
              "type": "string",
              "description": "Legal tax classificação for IPI (enquadramento tributário)\nWhen the process has CST IPI 52 or 54, it is mandatory to inform a Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU=\n"
            },
            "ipiLegalReason": {
              "type": "string",
              "maxLength": 60,
              "description": "Code for the IPI legal reason, this message will be placed on invoice."
            },
            "specialProductClass": {
              "type": "string",
              "enum": [
                "OTHERS",
                "COMMUNICATION",
                "ENERGY",
                "TRANSPORT",
                "FUEL AND LUBRICANT",
                "VEHICLE",
                "ALCOHOLIC BEVERAGES",
                "WEAPONS",
                "AMMO",
                "PERFUME",
                "TOBACCO"
              ]
            },
            "icmsConf": {
              "type": "array",
              "description": "One per State",
              "items": {
                "$ref": "#/definitions/AgastGoods_IcmsConf"
              }
            }
          }
        },
        {
          "title": "Service Agast Specialization"
        }
      ]
    },
    "Agast": {
      "type": "object",
      "required": [
        "code",
        "codeType"
      ],
      "properties": {
        "code": {
          "type": "string",
          "description": "Agast Code. AGAST (Avalara Goods and Services Types) are preset products with default tax definitions available to be used as provided or copied to create an specific comapany item."
        },
        "description": {
          "type": "string",
          "maxLength": 200,
          "description": "Agast Description"
        },
        "lifeTimeStart": {
          "type": "string",
          "description": "date when this configuration values starts"
        },
        "lifeTimeEnd": {
          "type": "string",
          "description": "date when this configuration values expire"
        },
        "inactive": {
          "type": "boolean",
          "description": "set this configuration to Inactive"
        },
        "hsCode": {
          "type": "string",
          "maxLength": 8,
          "description": "harmonized code, NCM or LC 116"
        },
        "codeType": {
          "type": "string",
          "enum": [
            "NCM",
            "NBS",
            "LC116",
            "SERVICE UNREGULATED"
          ]
        },
        "accruablePISTaxation": {
          "type": "string",
          "description": "Inform if this item by nature is subject to PIS taxation or exempt\n- 'T' # TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'N' # NO TAXABLE\n",
          "enum": [
            "T",
            "Z",
            "E",
            "H",
            "N"
          ]
        },
        "pisExemptLegalReasonCode": {
          "type": "string",
          "description": "When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption"
        },
        "pisExemptLegalReason": {
          "type": "string",
          "maxLength": 1024,
          "description": "When specified a reason, this field holds the reason's description"
        },
        "accruableCOFINSTaxation": {
          "type": "string",
          "description": "Inform if this item by nature is subject to COFINS taxation or exempt\n- 'T' # TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'N' # NO TAXABLE\n",
          "enum": [
            "T",
            "Z",
            "E",
            "H",
            "N"
          ]
        },
        "cofinsExemptLegalReasonCode": {
          "type": "string",
          "description": "When exempt, taxable with zero rate, suspended, not taxable, this field informs the official code number for the exemption"
        },
        "cofinsExemptLegalReason": {
          "type": "string",
          "maxLength": 1024,
          "description": "When specified a reason, this field holds the reason's description"
        },
        "pisCofinsCreditNotAllowed": {
          "type": "boolean",
          "description": "on Real Profit Purchase transaction, inform if this item allows tax credits when it is non-cumulative"
        },
        "federalTaxRate": {
          "type": "array",
          "description": "This is an array of tax object related to an agast.",
          "items": {
            "$ref": "#/definitions/TaxTypeRate"
          }
        },
        "notes": {
          "type": "string",
          "description": "Free-form text for optionally adding any comment on this."
        },
        "taxAdviserCode": {
          "type": "string",
          "description": "This adds a purely informational information about the source of TaxAdviser imported data."
        }
      }
    },
    "AgastGoods_IcmsConf": {
      "type": "object",
      "description": "See definitions IcmsConfByState",
      "properties": {
        "code": {
          "type": "string"
        },
        "state": {
          "$ref": "#/definitions/StateEnum"
        }
      }
    },
    "StateEnum": {
      "type": "string",
      "maxLength": 2,
      "enum": [
        "AC",
        "AL",
        "AP",
        "AM",
        "BA",
        "CE",
        "DF",
        "ES",
        "GO",
        "MA",
        "MT",
        "MS",
        "MG",
        "PA",
        "PB",
        "PR",
        "PE",
        "PI",
        "RJ",
        "RN",
        "RS",
        "RO",
        "RR",
        "SC",
        "SP",
        "SE",
        "TO"
      ],
      "description": "State Abreviation:\n- 'AC'\n- 'AL'\n- 'AP'\n- 'AM'\n- 'BA'\n- 'CE'\n- 'DF'\n- 'ES'\n- 'GO'\n- 'MA'\n- 'MT'\n- 'MS'\n- 'MG'\n- 'PA'\n- 'PB'\n- 'PR'\n- 'PE'\n- 'PI'\n- 'RJ'\n- 'RN'\n- 'RS'\n- 'RO'\n- 'RR'\n- 'SC'\n- 'SP'\n- 'SE'\n- 'TO'\n"
    },
    "TaxTypeRate": {
      "type": "object",
      "required": [
        "taxType",
        "taxModel"
      ],
      "properties": {
        "taxType": {
          "$ref": "#/definitions/TaxType"
        },
        "taxModel": {
          "type": "string",
          "enum": [
            "rate",
            "srf"
          ],
          "description": "Tax can be calculated by rate or by quantity"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "Specific tax rate ex 3.5 (3.5%)"
        },
        "srvAmount": {
          "type": "number",
          "format": "double",
          "description": "Specific tax rate ex 3.5 (3.5%)"
        },
        "quantityUnidBase": {
          "type": "string",
          "maxLength": 6
        },
        "specializationType": {
          "type": "string",
          "enum": [
            "basic",
            "monophase",
            "taxSubstitution"
          ]
        }
      }
    },
    "TaxType": {
      "type": "string",
      "description": "Tax Rate\nObs: AR - \"a recolher\" (serviço).\nRP e PP - filtrado para alvos de lucro real ou lucro presumido (serviço)\n",
      "enum": [
        "INSS",
        "INSS_RF",
        "INSS_AR",
        "IRRF",
        "PIS",
        "PIS_RF",
        "PIS_RP",
        "PIS_PP",
        "COFINS",
        "COFINS_RF",
        "COFINS_RP",
        "COFINS_PP",
        "CSLL",
        "CSLL_RF",
        "CSLL_PP",
        "CSLL_RP",
        "IRPJ",
        "ISS",
        "ISS_RF",
        "IPI"
      ]
    },
    "LegalReason": {
      "type": "object",
      "required": [
        "name",
        "description",
        "scope"
      ],
      "description": "Legal Reason (Fundamentação Legal):\n- 'name'\n- 'description'\n- 'scope'\n",
      "properties": {
        "id": {
          "type": "string",
          "description": "Internal ID"
        },
        "referenceCode": {
          "type": "string",
          "description": "A custom, non-unique, non-mandatory reference code that might be used to reference\na company Reason record to a global Reason record.\n"
        },
        "companyId": {
          "type": "string",
          "description": "If present, this record is scoped to the company."
        },
        "scope": {
          "type": "string",
          "description": "Message scope. May be one of these.\ngeneral - This message is not linked to any entity (agast/process/cfop) and will be applied to any item in a transacition. (Esta mensagem tem escopo geral, nao está relacionadas diretamente qualquer objeto.);\nlinkedTo - This message is linked to an entity, and its processing will only occur when the context involves it. (Esta mensagens estão relacionadas diretamente a algum objeto como um AGAST por exemplo, um Processo ou uma CFOP.);\n",
          "enum": [
            "general",
            "linkedTo"
          ]
        },
        "disable": {
          "type": "boolean",
          "description": "Set this message as no longer valid"
        },
        "description": {
          "type": "string",
          "maxLength": 5000,
          "description": "Legal reason textual description;"
        },
        "name": {
          "type": "string",
          "description": "Short name to this message"
        },
        "legalCode": {
          "type": "string",
          "description": "this field inform the official code number"
        },
        "showInInvoice": {
          "type": "string",
          "description": "Optional. Show this message when used in Invoice (NFe, NFCe, others...). Where to show this.",
          "enum": [
            "complementaryInfoMessage",
            "fiscalInfoMessage",
            "itemInfoMessage",
            "no show"
          ]
        },
        "referencedProcesses": {
          "description": "Referenced Process",
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "object",
            "properties": {
              "nProc": {
                "type": "string",
                "maxLength": 60,
                "description": "Process Identifier (NFe <nProc> tag)"
              },
              "indProc": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "9"
                ],
                "description": "Process Origin (NFe <indProc> tag)\n- '0' # SEFAZ;\n- '1' # Justiça Federal;\n- '2' # Justiça Estadual;\n- '3' # Secex/RFB;\n- '9' # Outros\n"
              }
            }
          }
        },
        "taxConstraint": {
          "description": "Filter this message application to specified tax cases.\n",
          "properties": {
            "taxType": {
              "type": "string",
              "enum": [
                "NONE",
                "INSS",
                "IRRF",
                "IRPJ",
                "PIS",
                "COFINS",
                "CSLL",
                "IPI",
                "ICMS",
                "II",
                "IOF",
                "ISS",
                "APROXTOTALTAX"
              ],
              "description": "This is the Tax Type to apply legal messages.\n- 'NONE'\n- 'INSS'\n- 'IRRF'\n- 'IRPJ'\n- 'PIS'\n- 'COFINS'\n- 'CSLL'\n- 'IPI'\n- 'ICMS'\n- 'II'\n- 'IOF'\n- 'ISS'\n- 'APROXTOTALTAX'\n"
            },
            "specializedTaxType": {
              "type": "string",
              "enum": [
                "icms",
                "icmsSt",
                "icmsStSd",
                "icmsPartOwn",
                "icmsPartDest",
                "icmsDifaFCP",
                "icmsDifaDest",
                "icmsDifaRemet",
                "icmsRf",
                "icmsDeson",
                "icmsCredsn",
                "pis",
                "pisSt",
                "cofins",
                "cofinsSt",
                "ipi",
                "ipiReturned",
                "ii",
                "iof"
              ],
              "description": "These are the specific tax types to which a message may be applied\n- 'icms'\n- 'icmsSt'\n- 'icmsStSd'\n- 'icmsPartOwn'\n- 'icmsPartDest'\n- 'icmsDifaFCP'\n- 'icmsDifaDest'\n- 'icmsDifaRemet'\n- 'icmsRf'\n- 'icmsDeson'\n- 'icmsCredsn'\n- 'pis'\n- 'pisSt'\n- 'cofins'\n- 'cofinsSt'\n- 'ipi'\n- 'ipiReturned'\n- 'ii'\n- 'iof'\n"
            },
            "jurisdictionType": {
              "type": "string",
              "enum": [
                "NONE",
                "City",
                "State",
                "Country"
              ],
              "description": "Types of jurisdiction\n- 'NONE'\n- 'City'\n- 'State'\n- 'Country'\n"
            },
            "jurisdictionCode": {
              "type": "string",
              "description": "Code to identify the Jurisdiction"
            },
            "precondition": {
              "type": "string",
              "description": "script rule that will evaluated to decide if this message is applicable.\nif doesn't have rule is samething that return true value.\n"
            }
          }
        }
      }
    },
    "AgastService": {
      "title": "Service Agast Specialization",
      "allOf": [
        {
          "$ref": "#/definitions/Agast"
        },
        {
          "type": "object",
          "title": "Service Agast Specialization",
          "properties": {
            "pisCofinsTaxReporting": {
              "type": "string",
              "enum": [
                "cumulative",
                "noCumulative"
              ],
              "description": "when the company is Real Profit inform if this item is cumulative or no cumulative by default"
            },
            "accruableCSLLTaxation": {
              "type": "string",
              "description": "Inform if this item by nature is subject to CSLL taxation or exempt\n- 'T' # TAXABLE\n- 'E' # EXEMPT\n",
              "enum": [
                "T",
                "E"
              ]
            },
            "csllExemptLegalReason": {
              "type": "string",
              "maxLength": 1024
            },
            "csllExemptLegalReasonCode": {
              "type": "string"
            },
            "withholding": {
              "$ref": "#/definitions/AgastService_Withhold"
            },
            "issDueatDestination": {
              "type": "boolean",
              "description": "for service items with City Jurisdiction, inform where the ISS tax is due"
            }
          }
        },
        {
          "title": "Service Agast Specialization"
        }
      ]
    },
    "AgastService_Withhold": {
      "description": "inform if this item is subject to withholding tax on service Transactions, default true",
      "type": "object",
      "properties": {
        "IRRF": {
          "type": "boolean"
        },
        "IRRFLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "INSSSubjectPayrollTaxRelief": {
          "type": "boolean",
          "description": "Item subjecto to Payroll Tax Relief\nItem sujeto à desoneraçãode folha de pagamento\n"
        },
        "INSS": {
          "type": "boolean"
        },
        "INSSLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "INSSForSimples": {
          "type": "boolean"
        },
        "INSSForSimplesLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "PIS": {
          "description": "inform if this item is subject to withholding PIS on service Transactions, by entity type, default true",
          "$ref": "#/definitions/AgastService_WithholdPCC"
        },
        "COFINS": {
          "description": "inform if this item is subject to withholding COFINS on service Transactions, by entity type, default true",
          "$ref": "#/definitions/AgastService_WithholdPCC"
        },
        "CSLL": {
          "description": "inform if this item is subject to withholding CSLL on service Transactions, by entity type, default true",
          "$ref": "#/definitions/AgastService_WithholdPCC"
        }
      }
    },
    "AgastService_WithholdPCC": {
      "type": "object",
      "properties": {
        "business": {
          "type": "boolean"
        },
        "businessLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "federalGovernment": {
          "type": "boolean"
        },
        "federalGovernmentLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "stateGovernment": {
          "type": "boolean"
        },
        "stateGovernmentLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        },
        "cityGovernment": {
          "type": "boolean"
        },
        "cityGovernmentLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "reference id to TaxLegalReason"
        }
      }
    },
    "IcmsConfByState": {
      "type": "object",
      "required": [
        "code",
        "state"
      ],
      "properties": {
        "code": {
          "type": "string",
          "maxLength": 60,
          "description": "Identify the IcmsConfState in namespace"
        },
        "state": {
          "$ref": "#/definitions/StateEnum"
        },
        "name": {
          "type": "string",
          "maxLength": 60,
          "description": "name for this configuration"
        },
        "startDate": {
          "type": "string",
          "description": "date when this configuration values starts"
        },
        "expirationDate": {
          "type": "string",
          "description": "date when this configuration values expire"
        },
        "inactive": {
          "type": "boolean",
          "description": "set this configuration to Inactive"
        },
        "subjectToST": {
          "type": "boolean",
          "description": "inform that the item linked to this configuration is subject to ICMS ST on this state"
        },
        "icmsCST": {
          "type": "string",
          "enum": [
            "T",
            "E",
            "H",
            "D",
            "N",
            "O",
            "OZ"
          ],
          "description": "On sales process inform the CST hat the item linked to this configuration is subject to for the own ICMS\n- 'T' # TAXABLE 00-Tributada\n- 'E' # EXEMPT 40-Isenta\n- 'H' # SUSPENDED 50-Suspensão\n- 'D' # DEFERMENT 51-Diferimento\n- 'N' # NO TAXABLE 41-Nao tributada\n- 'O' # OTHER 90-Outras\n- 'OZ' # OTHER AND ZERO VALUES 90-Outras\n"
        },
        "calcMode": {
          "type": "string",
          "enum": [
            "BYMVARATE",
            "SRP",
            "MMSRP",
            "OPERATIONAMOUNT"
          ],
          "description": "how this ICMS will be calculed for itens linked to this configuration"
        },
        "discountRateForMonoPhase": {
          "type": "number",
          "format": "double",
          "description": "discount if the item is subject to monophase PIS/COFINS for transactions inside state"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "ICMS rate"
        },
        "icmsBaseDiscount": {
          "type": "number",
          "format": "double",
          "description": "ICMS rate"
        },
        "msrp": {
          "type": "number",
          "format": "double",
          "description": "SRP or MMSRP amount base for this icms configuration"
        },
        "mvaRate": {
          "type": "number",
          "format": "double",
          "description": "ICMS mva rate to define calc base"
        },
        "msrpUnit": {
          "type": "string",
          "maxLength": 6,
          "description": "unit used to SRP amount value"
        },
        "icmsLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "Code for the ICM legal reason, this message will be placed on invoice."
        },
        "fcpRate": {
          "type": "number",
          "format": "double",
          "description": "Fundo de Combate à pobreza / Fund Against Poverty"
        },
        "icmsSTConf": {
          "type": "object",
          "properties": {
            "icmsStLegalReason": {
              "type": "string",
              "maxLength": 60,
              "description": "Code for the ICM-ST legal reason, this message will be placed on invoice."
            },
            "hasReductionOfMVAForSimples": {
              "type": "boolean",
              "description": "inform that substituted is tax regime Simplified the operation MVA will be reduced"
            },
            "reductionOfMVAForSimples": {
              "type": "number",
              "format": "double",
              "description": "mva reduction when substituted is tax regime Simplified."
            },
            "reductionOfMVAForSimplesLegalReason": {
              "type": "string",
              "maxLength": 60,
              "description": "Code for MVA Reduction legal reason, this message will be placed on invoice, when destionation entity is Simplified."
            },
            "calcMode": {
              "type": "string",
              "enum": [
                "BYMVARATE",
                "SRP",
                "MSRP"
              ],
              "description": "how this ICMS-ST will be calculed for itens linked to this configuration"
            },
            "mvaRate": {
              "type": "number",
              "format": "double",
              "description": "ICMS-ST mva rate to define calc base"
            },
            "icmsStBaseDiscount": {
              "type": "number",
              "format": "double",
              "description": "ICMS rate - Redução da BC ICMS ST (%)"
            },
            "srp": {
              "type": "number",
              "format": "double",
              "description": "SRP or MSRP amount base for this ICMS-ST configuration"
            },
            "srpUnit": {
              "type": "string",
              "maxLength": 6,
              "description": "unit used to srv amount value"
            }
          }
        },
        "icmsInterStateConf": {
          "type": "array",
          "description": "the map key is state code",
          "items": {
            "$ref": "#/definitions/IcmsConfInterState"
          }
        }
      }
    },
    "IcmsConfInterState": {
      "type": "object",
      "properties": {
        "state": {
          "$ref": "#/definitions/StateEnum"
        },
        "icmsCSTInterstate": {
          "type": "string",
          "enum": [
            "T",
            "E",
            "H",
            "D",
            "N",
            "O",
            "OZ"
          ],
          "description": "The CST inform if the interstate operation is taxable or not taxable and  when not taxable inform type\n- 'T' # TAXABLE 00-Tributada\n- 'E' # EXEMPT 40-Isenta\n- 'H' # SUSPENDED 50-Suspensão\n- 'D' # DEFERMENT 51-Diferimento\n- 'N' # NO TAXABLE 41-Nao tributada\n- 'O' # OTHER 90-Outras\n- 'OZ' # OTHER AND ZERO VALUES 90-Outras\n"
        },
        "icmsCST": {
          "type": "string",
          "enum": [
            "T",
            "E",
            "H",
            "D",
            "N",
            "O",
            "OZ"
          ],
          "description": "The CST inform f this item is taxable or not taxable no target state and when not taxable inform type\n- 'T' # TAXABLE 00-Tributada\n- 'E' # EXEMPT 40-Isenta\n- 'H' # SUSPENDED 50-Suspensão\n- 'D' # DEFERMENT 51-Diferimento\n- 'N' # NO TAXABLE 41-Nao tributada\n- 'O' # OTHER 90-Outras\n- 'OZ' # OTHER AND ZERO VALUES 90-Outras\n"
        },
        "calcMode": {
          "type": "string",
          "enum": [
            "BYMVARATE",
            "SRP",
            "MMSRP",
            "OPERATIONAMOUNT"
          ],
          "description": "how this ICMS will be calculed for itens linked to this configuration"
        },
        "discountRateForMonoPhase": {
          "type": "number",
          "format": "double",
          "description": "discount if the item is subject to monophase PIS/COFINS when operation interstate"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "ICMS rate"
        },
        "fcpRate": {
          "type": "number",
          "format": "double",
          "description": "FCP rate (Fundo de Combate à Probreza / Fund Against Poverty"
        },
        "icmsBaseDiscount": {
          "type": "number",
          "format": "double",
          "description": "ICMS discount rate"
        },
        "icmsBaseDiscountInterState": {
          "type": "number",
          "format": "double",
          "description": "ICMS interstate discount rate"
        },
        "icmsBaseDiscountInterStateForImported": {
          "type": "number",
          "format": "double",
          "description": "ICMS interstate discount rate"
        },
        "msrp": {
          "type": "number",
          "format": "double",
          "description": "SRP or MMSRP amount base for this icms configuration"
        },
        "mvaRate": {
          "type": "number",
          "format": "double",
          "description": "ICMS MVA rate to define calc base"
        },
        "msrpUnit": {
          "type": "string",
          "maxLength": 6,
          "description": "unit used to SRP amount value"
        },
        "icmsLegalReason": {
          "type": "string",
          "maxLength": 60,
          "description": "Code for the ICM legal reason, this message will be placed on invoice."
        },
        "icmsSTConf": {
          "type": "object",
          "properties": {
            "protocolType": {
              "type": "string",
              "enum": [
                "COVENANT",
                "PROTOCOL",
                "NOTHING"
              ]
            },
            "icmsStLegalReason": {
              "type": "string",
              "maxLength": 60,
              "description": "Code for the ICM-ST legal reason, this message will be placed on invoice."
            },
            "hasReductionOfMVAForSimples": {
              "type": "boolean",
              "description": "inform that substituted is tax regime Simplified the operation MVA will be reduced"
            },
            "reductionOfMVAForSimples": {
              "type": "number",
              "format": "double",
              "description": "MVA reduction when substituted is tax regime Simplified."
            },
            "reductionOfMVAForSimplesLegalReason": {
              "type": "string",
              "maxLength": 60,
              "description": "Code for MVA Reduction legal reason, this message will be placed on invoice, when destionation entity is Simplified."
            },
            "calcMode": {
              "type": "string",
              "enum": [
                "BYMVARATE",
                "SRP",
                "MSRP"
              ],
              "description": "how this ICMS-ST will be calculed for itens linked to this configuration"
            },
            "icmsStBaseDiscount": {
              "type": "number",
              "format": "double",
              "description": "ICMS rate - Redução da BC ICMS ST (%)"
            },
            "mvaRate": {
              "type": "number",
              "format": "double",
              "description": "ICMS-ST MVA rate to define calc base"
            },
            "srp": {
              "type": "number",
              "format": "double",
              "description": "SRP or MSRP amount base for this ICMS-ST configuration"
            },
            "srpUnit": {
              "type": "string",
              "maxLength": 6,
              "description": "unit used to SRP amount value"
            }
          }
        }
      }
    },
    "ProcessScenario": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxConf"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 60,
              "description": "Process name to Identify this configuration"
            },
            "description": {
              "type": "string",
              "description": "description detail about process"
            },
            "class": {
              "type": "string",
              "maxLength": 60,
              "description": "Natureza da Opreração - 'Describe kind of this transaction, summary"
            },
            "type": {
              "type": "string",
              "enum": [
                "SALES",
                "PURCHASE",
                "SALES_RETURN",
                "PURCHASE_RETURN",
                "TRANSFER_RETURN",
                "SHIPPING",
                "SHIPPING_RETURN",
                "TRANSFER",
                "RECEIPT_AJUSTE",
                "TRANSFER_AJUSTE"
              ]
            },
            "wayType": {
              "type": "string",
              "enum": [
                "in",
                "out"
              ],
              "description": "inform if the transaction is an operation to internalizing (receive) item or value"
            },
            "goal": {
              "type": "string",
              "enum": [
                "Normal",
                "Complementary",
                "Voided",
                "Replacement",
                "Return",
                "Adjustment"
              ],
              "description": "- 'Normal' # Normal\n- 'Complementary' # Complemento de Valores\n- 'Voided' # Anulação\n- 'Replacement' # Substituto\n- 'Return' # Devolução ou retorno\n- 'Adjustment' # Ajuste\n"
            },
            "overWriteCFOP": {
              "type": "boolean",
              "description": "inform that the configuration process overwrites the cfop configuration."
            },
            "cfops": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CfopConf"
              }
            }
          }
        }
      ]
    },
    "CfopConf": {
      "allOf": [
        {
          "$ref": "#/definitions/TaxConf"
        },
        {
          "type": "object",
          "required": [
            "name"
          ],
          "properties": {
            "name": {
              "type": "string",
              "maxLength": 60
            },
            "class": {
              "type": "string",
              "maxLength": 60,
              "description": "Natureza da Opreração - 'Describe kind of this transaction, summary"
            },
            "description": {
              "type": "string",
              "maxLength": 512
            },
            "wayType": {
              "type": "string",
              "enum": [
                "in",
                "out"
              ],
              "description": "inform if the transaction is an operation to internalizing item or value"
            },
            "codInState": {
              "type": "integer",
              "description": "CFOP code (tax code operation) when the transactions are within the same state."
            },
            "codOtherState": {
              "type": "integer",
              "description": "CFOP code (tax code operation) when the transactions are to another state."
            },
            "codOtherCountry": {
              "type": "integer",
              "description": "CFOP code (tax code operation) when the transactions are to another country."
            },
            "productType": {
              "type": "string",
              "enum": [
                "FOR PRODUCT",
                "FOR MERCHANDISE",
                "NO RESTRICTION"
              ],
              "description": "this field is used to define right CFOP, one operation type can be specialized to item product, item merchandise or generic"
            },
            "operationToTaxPayerOtherState": {
              "type": "boolean",
              "description": "field used to indicate an operation to ICMS tax payer"
            },
            "operationWithST": {
              "type": "boolean",
              "description": "field used to indicate an operation to items sibject to ICMS-ST"
            },
            "operationToFreeZone": {
              "type": "boolean",
              "description": "field used to indicate an operation to free zone"
            },
            "specificForProductClass": {
              "type": "string",
              "enum": [
                "OTHERS",
                "COMMUNICATION",
                "ENERGY",
                "TRANSPORT",
                "FUEL AND LUBRICANT",
                "VEHICLE",
                "ALCOHOLIC BEVERAGES",
                "WEAPONS",
                "AMMO",
                "PERFUME",
                "TOBACCO"
              ],
              "description": "field used to indicate an operation to some product class specifically"
            }
          }
        }
      ]
    },
    "TaxConf": {
      "type": "object",
      "required": [
        "code"
      ],
      "properties": {
        "code": {
          "type": "string",
          "maxLength": 40,
          "description": "main unique identificator"
        },
        "class": {
          "type": "string",
          "maxLength": 60,
          "description": "Natureza da Operação\nOperation Class\n"
        },
        "stockImpact": {
          "type": "boolean",
          "description": "Inform that the process has inventory impact."
        },
        "financialImpact": {
          "type": "boolean",
          "description": "Inform that the process has financial impact."
        },
        "cstIPI": {
          "type": "string",
          "description": "Inform if this process is subject to IPI taxation on output process\n- 'T'  # TAXABLE\n- 'Z'  # TAXABLE WITH RATE=0.00\n- 'E'  # EXEMPT\n- 'H'  # SUSPENDED\n- 'N'  # NO TAXABLE    \n- 'I'  # IMMUNE\n- 'O'  # OTHER\n- 'OZ' # OTHER AND ZERO VALUES\n- 'R'  # RETURN OF IPI\n",
          "enum": [
            "T",
            "Z",
            "E",
            "H",
            "N",
            "I",
            "O",
            "OZ",
            "R"
          ]
        },
        "ipiLegalTaxClass": {
          "type": "string",
          "description": "Legal tax classificação for IPI (enquadramento)\nWhen the processo has CST IPI 52 or 54, is mandatory inform Reason Code, see Anexo XIV - Código de Enquadramento Legal do IPI from  http://www.nfe.fazenda.gov.br/portal/exibirArquivo.aspx?conteudo=mCnJajU4BKU=\n"
        },
        "lookupIPIFromReferredTransaction": {
          "type": "boolean",
          "description": "Busca IPI para adicionar na base de calculo de ICMS do item de uma nota referenciada, Exemplo, processo de venda para entrega futura e simples remessa de uma venda de entrega futura.\nLookup IPI tax to add to ICMS Tax base from same item of Referred Transaction\n"
        },
        "accruablePISTaxation": {
          "type": "string",
          "description": "Inform if this item by nature is subject to PIS taxation or exempt\n- 'T'  # TAXABLE\n- 'Z'  # TAXABLE WITH RATE=0.00\n- 'E'  # EXEMPT\n- 'H'  # SUSPENDED\n- 'N'  # NO TAXABLE\n- 'O'  # OTHER\n- 'OZ' # OTHER AND ZERO VALUES\n",
          "enum": [
            "T",
            "Z",
            "E",
            "H",
            "N",
            "O",
            "OZ"
          ]
        },
        "pisExemptLegalReasonCode": {
          "type": "string",
          "description": "Reference to a tax reason record ID."
        },
        "pisExemptLegalReason": {
          "type": "string",
          "maxLength": 1024,
          "description": "When specifi reason, this field has the description"
        },
        "accruableCOFINSTaxation": {
          "type": "string",
          "description": "Inform if this item by nature is subject to COFINS taxation or exempt\n- 'T'  # TAXABLE\n- 'Z'  # TAXABLE WITH RATE=0.00\n- 'E'  # EXEMPT\n- 'H'  # SUSPENDED\n- 'N'  # NO TAXABLE    \n- 'O'  # OTHER\n- 'OZ' # OTHER AND ZERO VALUES\n",
          "enum": [
            "T",
            "Z",
            "E",
            "H",
            "N",
            "O",
            "OZ"
          ]
        },
        "cofinsExemptLegalReasonCode": {
          "type": "string",
          "maxLength": 3,
          "description": "When exempt, taxable with zero, suspended, not taxable, this field holds the official code number"
        },
        "cofinsExemptLegalReason": {
          "type": "string",
          "maxLength": 1024,
          "description": "When specifi reason, this field has the description"
        },
        "allowIPIcreditWhenInGoing": {
          "type": "boolean",
          "description": "Inform that the process allow IPI credit to Input process"
        },
        "icmsConf": {
          "type": "array",
          "description": "the map key is state code",
          "items": {
            "$ref": "#/definitions/IcmsTaxConf"
          }
        }
      }
    },
    "IcmsTaxConf": {
      "allOf": [
        {
          "$ref": "#/definitions/IcmsTaxConfBase"
        },
        {
          "type": "object",
          "properties": {
            "sameforAllDestination": {
              "type": "boolean",
              "description": "when this attribute is true, the relationShip dont need be analysed"
            },
            "relationShip": {
              "type": "array",
              "description": "the mapping key is state code / A chave do mapeamento é o código do Estado.",
              "items": {
                "$ref": "#/definitions/IcmsTaxConfBase"
              }
            }
          }
        }
      ]
    },
    "IcmsTaxConfBase": {
      "type": "object",
      "required": [
        "state"
      ],
      "properties": {
        "state": {
          "$ref": "#/definitions/StateEnum"
        },
        "icmsCSOSN": {
          "type": "string",
          "description": "when the company is tax regime Simples uses CSOSN and for the same type of transaction, CST and CSOSN cant match",
          "enum": [
            "T",
            "E",
            "N",
            "O",
            "OZ"
          ]
        },
        "icmsCST": {
          "type": "string",
          "enum": [
            "T",
            "E",
            "H",
            "D",
            "N",
            "O",
            "OZ"
          ],
          "description": "On sales process inform the CST hat the item linked to this configuration is subject to\n- 'T' # TAXABLE 00-Tributada\n- 'E' # EXEMPT 40-Isenta\n- 'H' # SUSPENDED 50-Suspensão\n- 'D' # DEFERMENT 51-Diferimento\n- 'N' # NO TAXABLE 41-Nao tributada\n- 'O' # OTHER 90-Outras\n- 'OZ' # OTHER AND ZERO VALUES 90-Outras\n"
        },
        "deferralrate": {
          "type": "number",
          "format": "double",
          "description": "Percentual deferral rate, applied over ICMS tax when CST is D DEFEREMENT"
        },
        "messageCode": {
          "type": "string",
          "maxLength": 60,
          "description": "Message to add to NF when this configuration is used"
        }
      }
    },
    "ItemSimple": {
      "required": [
        "code",
        "agast"
      ],
      "properties": {
        "companyId": {
          "description": "Company ID",
          "type": "string",
          "format": "uuid",
          "maxLength": 36
        },
        "code": {
          "type": "string",
          "description": "ERP Code",
          "maxLength": 60
        },
        "agast": {
          "type": "string",
          "description": "Agast Code",
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "description": "Item Description",
          "maxLength": 60
        }
      }
    },
    "ItemService_CityTaxConf": {
      "type": "object",
      "required": [
        "cityCode",
        "serviceCode"
      ],
      "properties": {
        "hasCPOM": {
          "type": "boolean",
          "description": "inform if seller has CPOM registry on destionation city, for this service."
        },
        "cityCode": {
          "type": "string",
          "description": "The IBGE code of the related city. The city's ISS properties may be checked and set through\nthe `taxconf/iss/{cityCode}` service; (ISSConfByCity)\n"
        },
        "serviceCode": {
          "type": "string",
          "description": "The service code which this item is registered at the target city.\nThe \"tax behavior\" of this item at the target city may be checked and set through\nthe `taxconf/iss/{cityCode}/{serviceCode}` service. (ISSConfService)\n"
        }
      }
    },
    "Address": {
      "title": "Address",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "zipcode"
          ],
          "properties": {
            "street": {
              "type": "string",
              "maxLength": 60,
              "description": "Street Name"
            },
            "neighborhood": {
              "type": "string",
              "maxLength": 60,
              "description": "Neighborhood Name"
            },
            "zipcode": {
              "type": "string",
              "description": "Zip Code"
            },
            "cityCode": {
              "type": "string",
              "pattern": "[0-9]{7}|0",
              "description": "City Code",
              "default": "0"
            },
            "cityName": {
              "type": "string",
              "maxLength": 60,
              "description": "City Name"
            },
            "state": {
              "type": "string",
              "description": "State Code",
              "pattern": "^([A-Z]{2,3})$"
            },
            "countryCode": {
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "description": "Country Code",
              "default": "0"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes",
              "pattern": "^([A-Z]{3})$"
            },
            "number": {
              "type": "string",
              "maxLength": 60,
              "description": "House number"
            },
            "complement": {
              "type": "string",
              "maxLength": 60,
              "description": "Any other information about the address (Room, Suite, Floor, etc))."
            },
            "phone": {
              "type": "string",
              "pattern": "^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$",
              "description": "Phone number"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "zipcode",
            "cityCode",
            "state"
          ],
          "properties": {
            "street": {
              "type": "string",
              "maxLength": 60,
              "description": "Street Name"
            },
            "neighborhood": {
              "type": "string",
              "maxLength": 60,
              "description": "Neighborhood Name"
            },
            "zipcode": {
              "type": "string",
              "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
              "description": "Brazilian Zip Code"
            },
            "cityCode": {
              "type": "string",
              "pattern": "^(\\d{7})$",
              "description": "City Code (IBGE)"
            },
            "cityName": {
              "type": "string",
              "maxLength": 60,
              "description": "City Name"
            },
            "state": {
              "$ref": "#/definitions/StateEnum"
            },
            "countryCode": {
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "description": "Country Code",
              "default": "0"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes",
              "pattern": "^([A-Z]{3})$",
              "default": "BRA"
            }
          }
        },
        {
          "title": "Address",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "zipcode"
              ],
              "properties": {
                "street": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Street Name"
                },
                "neighborhood": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Neighborhood Name"
                },
                "zipcode": {
                  "type": "string",
                  "description": "Zip Code"
                },
                "cityCode": {
                  "type": "string",
                  "pattern": "[0-9]{7}|0",
                  "description": "City Code",
                  "default": "0"
                },
                "cityName": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "City Name"
                },
                "state": {
                  "type": "string",
                  "description": "State Code",
                  "pattern": "^([A-Z]{2,3})$"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "[0-9]{1,4}",
                  "description": "Country Code",
                  "default": "0"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes",
                  "pattern": "^([A-Z]{3})$"
                },
                "number": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "House number"
                },
                "complement": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Any other information about the address (Room, Suite, Floor, etc))."
                },
                "phone": {
                  "type": "string",
                  "pattern": "^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$",
                  "description": "Phone number"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "zipcode",
                "cityCode",
                "state"
              ],
              "properties": {
                "street": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Street Name"
                },
                "neighborhood": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Neighborhood Name"
                },
                "zipcode": {
                  "type": "string",
                  "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
                  "description": "Brazilian Zip Code"
                },
                "cityCode": {
                  "type": "string",
                  "pattern": "^(\\d{7})$",
                  "description": "City Code (IBGE)"
                },
                "cityName": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "City Name"
                },
                "state": {
                  "$ref": "#/definitions/StateEnum"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "[0-9]{1,4}",
                  "description": "Country Code",
                  "default": "0"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes",
                  "pattern": "^([A-Z]{3})$",
                  "default": "BRA"
                }
              }
            }
          ]
        }
      ]
    }
  },
  "x-swagger-erouter-validation-rules": {
    "/companies/agasts/*": {
      "in": "header",
      "field": "Avalara-Product-Type",
      "rules": {
        "goods": "/companies/agasts/*?goods",
        "_default": "/companies/agasts/*?service"
      }
    },
    "/companies/items/*": {
      "in": "header",
      "field": "Avalara-Product-Type",
      "rules": {
        "goods": "/companies/items/*?goods",
        "_default": "/companies/items/*?service"
      }
    }
  }
}