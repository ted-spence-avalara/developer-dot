{
  "swagger": "2.0",
  "info": {
    "title": "AvaTax Brazil",
    "description": "The Avatax-Brazil API exposes the most commonly services available for interacting with the AvaTax-Brazil services, allowing calculation of taxes, issuing electronic invoice documents and modifying existing transactions when allowed by tax authorities.  This API is exclusively for use by business with a physical presence in Brazil.",
    "version": "0.9.0"
  },
  "host": "avataxbr-sandbox.avalarabrasil.com.br",
  "x-swagger-namespace": "SV",
  "schemes": [
    "http"
  ],
  "basePath": "/v2",
  "produces": [
    "application/json"
  ],
  "paths": {
    "/calculations?goods": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "calculationGood",
        "summary": "Calculation Method",
        "description": "This method has more the one operation model,\n(a) simple calculation, this mode has a minimal validation and mandatory field, only enough for calc;\n(b) full calculation, simulation, this mode the system will check all atributes and calc all taxes for that transaction;\n(c) full calculation, starting process to transform this this request into transaction (for NFe, NFCe, CT-e need government authorization);\n(d) ASIS, the sistem receive the message, store and try get authorization, model valid only form NFe, NFCe and CT-e.\n",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TransactionForGoodsIn"
            }
          },
          {
            "name": "noPersist",
            "in": "query",
            "description": "Do not save this calculation",
            "type": "string"
          }
        ],
        "tags": [
          "Goods Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/TransactionForGoodsOut"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations?service-sales": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "calculationServiceSales",
        "summary": "Calculation Method",
        "description": "Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned. Accept all transactions type (Sale, Purchase, Payment and Receipt), the format and message type are desbribed above in each 'calculations-<type>'.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SalesTransactionIn"
            }
          },
          {
            "name": "noPersist",
            "in": "query",
            "description": "Do not save this calculation",
            "type": "string"
          }
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/SalesTransactionOut"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations?service-purchase": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "calculationServicePurchase",
        "summary": "Calculation Method",
        "description": "Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PurchaseTransactionIn"
            }
          },
          {
            "name": "noPersist",
            "in": "query",
            "description": "Do not save this calculation",
            "type": "string"
          }
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/PurchaseTransactionOut"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations?service-payment": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "calculationServicePayment",
        "summary": "Calculation Method",
        "description": "Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentTransactionIn"
            }
          },
          {
            "name": "noPersist",
            "in": "query",
            "description": "Do not save this calculation",
            "type": "string"
          }
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/PaymentTransactionOut"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations?service-receipt": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        }
      ],
      "post": {
        "operationId": "calculationServiceReceipt",
        "summary": "Calculation Method",
        "description": "Refer to the business rules below, for an outline view of Tax Determination Process as a whole, showing a beginning-to-end process making use of the specific UseCases and discriminating all required attributes and data to be returned.",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "description": "Transaction Message",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ReceiptTransactionIn"
            }
          },
          {
            "name": "noPersist",
            "in": "query",
            "description": "Do not save this calculation",
            "type": "string"
          }
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out",
            "schema": {
              "$ref": "#/definitions/ReceiptTransactionOut"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations/goods/{transactionType}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_transactionType_goods"
        }
      ],
      "get": {
        "operationId": "retrieveGoodsTransactions",
        "summary": "Retrieve goods transactions",
        "description": "Retrieve a list of transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Goods Calculations"
        ],
        "responses": {
          "200": {
            "description": "Calculations list.",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TransactionForGoodsIn"
              }
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations/goods/{transactionType}/{documentCode}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_transactionType_goods"
        },
        {
          "$ref": "#/parameters/path_documentCode"
        }
      ],
      "get": {
        "operationId": "retrieveGoodsTransactionDocument",
        "summary": "Retrieve goods transactions",
        "description": "Retrieve a single transaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Goods Calculations"
        ],
        "responses": {
          "200": {
            "description": "Calculations item",
            "schema": {
              "$ref": "#/definitions/TransactionForGoodsIn"
            }
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations/service/{transactionType}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_transactionType_service"
        }
      ],
      "get": {
        "operationId": "retrieveServiceTransactions",
        "summary": "Retrieve service transactions",
        "description": "Retrieve a list of transactions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "List of transaction"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations/service/{transactionType}/{documentCode}": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_transactionType_service"
        },
        {
          "$ref": "#/parameters/path_documentCode"
        }
      ],
      "get": {
        "operationId": "retrieveServiceTransactionDocument",
        "summary": "Retrieve service transactions",
        "description": "Retrieve a single transaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "List of transaction"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    },
    "/calculations/service/{transactionType}/{documentCode}/transactions": {
      "parameters": [
        {
          "$ref": "#/parameters/header_jwt"
        },
        {
          "$ref": "#/parameters/path_transactionType_service"
        },
        {
          "$ref": "#/parameters/path_documentCode"
        }
      ],
      "post": {
        "operationId": "convertServiceCalculatioToTransaction",
        "summary": "Promote a calculation to transaction",
        "description": "Promote a calculation to transaction",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "Services Calculations"
        ],
        "responses": {
          "200": {
            "description": "Transaction Out"
          },
          "400": {
            "$ref": "#/responses/400_BadRequest"
          },
          "401": {
            "$ref": "#/responses/401_Unauthorized"
          },
          "403": {
            "$ref": "#/responses/403_Forbidden"
          },
          "404": {
            "$ref": "#/responses/404_NotFound"
          },
          "429": {
            "$ref": "#/responses/429_TooManyRequests"
          },
          "500": {
            "$ref": "#/responses/500_InternalServerError"
          },
          "503": {
            "$ref": "#/responses/503_ServiceUnavailable"
          }
        }
      }
    }
  },
  "parameters": {
    "header_jwt": {
      "name": "Authorization",
      "in": "header",
      "description": "Bearer {auth}",
      "required": true,
      "type": "string"
    },
    "path_accountId": {
      "name": "accountId",
      "in": "path",
      "description": "Account ID",
      "required": true,
      "type": "string",
      "format": "uuid"
    },
    "path_companyCode": {
      "name": "companyCode",
      "in": "path",
      "description": "Company Code",
      "required": true,
      "type": "string"
    },
    "path_transactionType_goods": {
      "name": "transactionType",
      "in": "path",
      "description": "Transaction Type",
      "required": true,
      "type": "string",
      "enum": [
        "sale",
        "purchase",
        "sales-return",
        "purchase-return",
        "transfer-return",
        "shipping",
        "shipping-return",
        "transfer",
        "receipt-adjustment",
        "transfer-adjustment"
      ]
    },
    "path_transactionType_service": {
      "name": "transactionType",
      "in": "path",
      "description": "Transaction Type (sale, purchase, receipts or payment)",
      "required": true,
      "type": "string",
      "enum": [
        "sale",
        "purchase",
        "payment",
        "receipt"
      ]
    },
    "path_documentCode": {
      "name": "documentCode",
      "in": "path",
      "description": "Document Code",
      "required": true,
      "type": "string"
    }
  },
  "responses": {
    "400_BadRequest": {
      "description": "The request was invalid or cannot be otherwise served.",
      "schema": {
        "$ref": "#/definitions/ValidationError"
      }
    },
    "401_Unauthorized": {
      "description": "Authentication credentials were missing or incorrect.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "403_Forbidden": {
      "description": "The request is understood, but it has been refused or access is not allowed.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "404_NotFound": {
      "description": "The URI requested is invalid or the resource requested does not exists.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "429_TooManyRequests": {
      "description": "The request cannot be served due to the application’s rate limit having been exhausted for the resource.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "500_InternalServerError": {
      "description": "Something is broken.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    },
    "503_ServiceUnavailable": {
      "description": "The server is up, but overloaded with requests. Try again later.",
      "schema": {
        "$ref": "#/definitions/Message"
      }
    }
  },
  "definitions": {
    "TransactionForGoodsIn": {
      "type": "object",
      "required": [
        "header",
        "lines"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/HeaderForGoods"
        },
        "lines": {
          "type": "array",
          "maxItems": 990,
          "items": {
            "$ref": "#/definitions/LineForGoods"
          }
        }
      }
    },
    "TransactionForGoodsOut": {
      "type": "object",
      "required": [
        "header",
        "lines",
        "calculatedTaxSummary",
        "processingInfo"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/HeaderForGoods"
        },
        "lines": {
          "type": "array",
          "maxItems": 990,
          "items": {
            "$ref": "#/definitions/LineForGoods"
          }
        },
        "calculatedTaxSummary": {
          "$ref": "#/definitions/CalculatedTaxSummaryForGoods"
        },
        "processingInfo": {
          "$ref": "#/definitions/ProcessingInfo"
        }
      }
    },
    "SalesTransactionOut": {
      "type": "object",
      "required": [
        "header",
        "lines",
        "calculatedTaxSummary",
        "processingInfo"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/SalesHeaderOut"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/SalesLinesOut"
          }
        },
        "calculatedTaxSummary": {
          "$ref": "#/definitions/SalesCalculatedTaxSummaryForService"
        },
        "processingInfo": {
          "$ref": "#/definitions/ProcessingInfo"
        }
      }
    },
    "SalesTransactionIn": {
      "type": "object",
      "required": [
        "header",
        "lines"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/SalesHeaderIn"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/SalesLinesIn"
          }
        }
      }
    },
    "PurchaseTransactionOut": {
      "type": "object",
      "required": [
        "header",
        "lines",
        "calculatedTaxSummary",
        "processingInfo"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/PurchaseHeaderOut"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/PurchaseLinesOut"
          }
        },
        "calculatedTaxSummary": {
          "$ref": "#/definitions/PurchaseCalculatedTaxSummaryForService"
        },
        "processingInfo": {
          "$ref": "#/definitions/ProcessingInfo"
        }
      }
    },
    "PurchaseTransactionIn": {
      "type": "object",
      "required": [
        "header",
        "lines"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/PurchaseHeaderIn"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/PurchaseLinesIn"
          }
        }
      }
    },
    "PaymentTransactionOut": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/PayRecHeader"
        },
        "lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PayRecLinesOut"
          }
        },
        "calculatedTaxSummary": {
          "$ref": "#/definitions/PayRecCalculatedTaxSummaryForService"
        },
        "processingInfo": {
          "$ref": "#/definitions/ProcessingInfo"
        }
      }
    },
    "PaymentTransactionIn": {
      "type": "object",
      "properties": {
        "header": {
          "$ref": "#/definitions/PayRecHeader"
        },
        "lines": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PaymentLinesIn"
          }
        }
      }
    },
    "ReceiptTransactionOut": {
      "type": "object",
      "required": [
        "header",
        "lines",
        "calculatedTaxSummary",
        "processingInfo"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/PayRecHeader"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/PayRecLinesOut"
          }
        },
        "calculatedTaxSummary": {
          "$ref": "#/definitions/PayRecCalculatedTaxSummaryForService"
        },
        "processingInfo": {
          "$ref": "#/definitions/ProcessingInfo"
        }
      }
    },
    "ReceiptTransactionIn": {
      "type": "object",
      "required": [
        "header",
        "lines"
      ],
      "properties": {
        "header": {
          "$ref": "#/definitions/PayRecHeader"
        },
        "lines": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "#/definitions/PaymentLinesIn"
          }
        }
      }
    },
    "ValidationError": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "errors": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "value": {
          "type": "string"
        },
        "in": {
          "type": "string",
          "enum": [
            "params",
            "body",
            "query"
          ]
        }
      }
    },
    "Message": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "HeaderForGoods": {
      "type": "object",
      "required": [
        "participants",
        "transactionType",
        "eDocCreatorType",
        "companyLocation",
        "messageType"
      ],
      "properties": {
        "messageType": {
          "type": "string",
          "enum": [
            "goods"
          ],
          "default": "goods"
        },
        "accountId": {
          "type": "string",
          "description": "This string is a UUID issued by Avalara to identify the Avalara account that owns the company identified by the companyCode on the next line."
        },
        "companyCode": {
          "type": "string",
          "maxLength": 60,
          "description": "string is a code maintained by the client application to uniquely identify the company for which this transaction is being recorded. It is unique within the context of an Account. It will be limited to 60 characters when creating a Company"
        },
        "documentCode": {
          "type": "string",
          "description": "This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored"
        },
        "participants": {
          "description": "List of transaction participants, Seller, Buyer, Carrier",
          "type": "object",
          "properties": {
            "entity": {
              "$ref": "#/definitions/EntityForGoods"
            },
            "transporter": {
              "$ref": "#/definitions/EntityForGoods"
            }
          }
        },
        "nfAccessKey": {
          "type": "string",
          "description": "This is the public NF id. With this number is possible get invoice information directly from government."
        },
        "nfceQrCode": {
          "type": "string",
          "maxLength": 600,
          "minLength": 100,
          "description": "qr code printed on DANFE;"
        },
        "transactionType": {
          "type": "string",
          "enum": [
            "Sale",
            "Purchase",
            "SalesReturn",
            "PurchaseReturn",
            "TransferReturn",
            "Shipping",
            "ShippingReturn",
            "Transfer",
            "ReceiptAdjustment",
            "TransferAdjustment"
          ],
          "description": "This string indicates the type of transaction for which tax should be calculated."
        },
        "transactionModel": {
          "type": "string",
          "enum": [
            "01",
            "1B",
            "02",
            "2D",
            "2E",
            "04",
            "06",
            "07",
            "08",
            "8B",
            "09",
            "10",
            "11",
            "13",
            "14",
            "15",
            "16",
            "18",
            "21",
            "22",
            "26",
            "27",
            "28",
            "29",
            "55",
            "57",
            "59",
            "60",
            "65"
          ],
          "description": "- '01' # Nota Fiscal 1/1A\n- '1B' # Nota Fiscal Avulsa\n- '02' # Nota Fiscal de Venda a-Consumidor\n- '2D' # Cupom Fiscal\n- '2E' # Cupom Fiscal-Bilhete de Passagem\n- '04' # Nota Fiscal de Produtor\n- '06' # Nota Fiscal/Conta de Energia Elétrica\n- '07' # Nota Fiscal de Serviço de Transporte\n- '08' # Conhecimento de Transporte Rodoviário de-Cargas\n- '8B' # Conhecimento de Transporte de-Cargas Avulso\n- '09' # Conhecimento de Transporte Aquaviário de-Cargas\n- '10' # Conhecimento Aéreo\n- '11' # Conhecimento de Transporte Ferroviário de-Cargas\n- '13' # Bilhete de Passagem Rodoviário\n- '14' # Bilhete de Passagem Aquaviário\n- '15' # Bilhete de Passagem e-Nota de-Bagagem\n- '16' # Bilhete de Passagem Ferroviário\n- '18' # Resumo de Movimento Diário\n- '21' # Nota Fiscal de Serviço de-Comunicação\n- '22' # Nota Fiscal de Serviço de Telecomunicação\n- '26' # Conhecimento de Transporte Multimodal de-Cargas\n- '27' # Nota Fiscal De Transporte Ferroviário De-Carga\n- '28' # Nota Fiscal/Conta de Fornecimento de Gás-Canalizado\n- '29' # Nota Fiscal/Conta de Fornecimento de Água-Canalizada\n- '55' # Nota Fiscal Eletrônica (NF-e)\n- '57' # Conhecimento de Transporte Eletrônico (CT-e)\n- '59' # Cupom Fiscal Eletrônico (CF-e-SAT)\n- '60' # Cupom Fiscal Eletrônico (CF-e-ECF)\n- '65' # Nota Fiscal Eletrônica ao-Consumidor Final (NFC-e)\n"
        },
        "transactionClass": {
          "type": "string",
          "description": "Natureza da Opreração - 'Describe kind of this transaction, summary"
        },
        "eDocCreatorType": {
          "type": "string",
          "enum": [
            "self",
            "other"
          ],
          "default": "self"
        },
        "eDocCreatorPerspective": {
          "type": "boolean",
          "default": true,
          "description": "This Flag is used only when eDocCreatorType is other and the return show Taxes using eDocCreator perspective or self perspective."
        },
        "currency": {
          "type": "string",
          "default": "BRL",
          "description": "currency code"
        },
        "companyLocation": {
          "type": "string",
          "description": "This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity"
        },
        "transactionDate": {
          "type": "string",
          "description": "This string is the transaction date in ISO 8601 format, create transaction date"
        },
        "shippingDate": {
          "type": "string",
          "description": "This string is the transaction date in ISO 8601 format, when products were shipped, can be empty or absent"
        },
        "additionalInfo": {
          "$ref": "#/definitions/AdditionalInformation"
        },
        "tpImp": {
          "type": "string",
          "description": "how the document will be printed\n- '0' # without DANFE;\n- '1' # DANFe Letter;\n- '2' # DANFe Landscape;\n- '3' # DANFe Simplified;\n- '4' # DANFe NFC-e;\n- '5' # DANFe NFC-e e-mail\n",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "5"
          ]
        },
        "idDest": {
          "description": "This indicator inform transaction target place, when is AUTOMATIC the company address and entity address are analyzed to identify type of transaction target place\n1- same state; 2 - interstate; 3-with exterior. Exist some cases where is necessary force this situation like when buyer from another state buy something in loco, the address are from different states, but transaction no. \nIdentificador de Local de destino da operação, na opção AUTOMATIC endereços da Companhia e da entidade destino são analisados para\nsaber se é uma operação dentro do mesmo estado, interestadual ou com o exterior. Há situações onde é necessário forçar este indicador como por exemplo \nQuando uma pessoa com endereço em outro estado, compra uma mercadoria de forma presencial, é uma operação interna apesar dos endereços dos envolvidos estarem em estados distintos.\n- 0 # AUTOMATIC - DEFAULT\n- 1 # Interna;\n- 2 # Interestadual;\n- 3 # Exterior)\n",
          "type": "integer",
          "enum": [
            0,
            1,
            2,
            3
          ],
          "default": 0
        },
        "indPres": {
          "type": "string",
          "description": "Presence indicator\n- '0' # Not applicable\n- '1' # Presential;\n- '2' # Remote, internet;\n- '3' # Remote, phone;\n- '4' # NFC-e home delivery;\n- '9' # Remote, others\n",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9"
          ]
        },
        "invoiceNumber": {
          "type": "integer",
          "description": "Invoice number, sequential unique by invoice serial (Número da nota fiscal)"
        },
        "invoiceSerial": {
          "type": "integer",
          "description": "Invoice number, sequential unique by invoice serial (Número da nota fiscal)\n"
        },
        "defaultLocations": {
          "$ref": "#/definitions/DefaultLocations"
        },
        "transport": {
          "description": "Shipment",
          "$ref": "#/definitions/Transport"
        },
        "nfRef": {
          "description": "Transactions or other invoices referenced",
          "type": "array",
          "maxItems": 500,
          "items": {
            "$ref": "#/definitions/NRef"
          }
        },
        "payment": {
          "$ref": "#/definitions/Payment"
        },
        "purchaseInfo": {
          "$ref": "#/definitions/PurchaseInfo"
        },
        "export": {
          "$ref": "#/definitions/ExportInfo"
        }
      }
    },
    "LineForGoods": {
      "type": "object",
      "required": [
        "lineCode",
        "itemCode",
        "numberOfItems",
        "lineAmount",
        "itemDescription",
        "useType",
        "processScenario"
      ],
      "properties": {
        "lineCode": {
          "type": "integer",
          "description": "This is unique identifier for this line in the transaction"
        },
        "itemCode": {
          "type": "string",
          "maxLength": 60,
          "description": "This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU and is required for SST states."
        },
        "avalaraGoodsAndServicesType": {
          "type": "string",
          "description": "AGAST CODE for itemCode"
        },
        "numberOfItems": {
          "type": "number",
          "format": "double",
          "default": 1,
          "description": "This decimal 11 integers and 1 to 4 decimals captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1"
        },
        "returnedPercentageAmount": {
          "type": "number",
          "format": "double",
          "description": "when is return operation this field inform the percentage of returned itens. This decimal max 3 integers and 2 decimals, v >=0.00 and v <= 100.00"
        },
        "lineUnitPrice": {
          "type": "number",
          "format": "double",
          "description": "This decimal 11 integers and 1 to 10 decimals captures the unit price of this line."
        },
        "lineAmount": {
          "type": "number",
          "format": "double",
          "description": "In its simplest form lineAmount = (item price * numberOfItems). If taxIncluded is 'true', lineAmount = (item price * numberOfItems + tax)."
        },
        "itemDescription": {
          "type": "string",
          "description": "This string captures the description of the item represented by this line, will be used LC 116"
        },
        "lineTaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "Discount conditional, This decimal 13 integers and 0 to 2 decimals"
        },
        "lineUntaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "discount unconditional, This decimal 13 integers and 0 to 2 decimals"
        },
        "useType": {
          "type": "string",
          "enum": [
            "use or consumption",
            "resale",
            "agricultural production",
            "production",
            "use or consumption on business establishment",
            "use or consumption on transporter service establishment",
            "use or consumption on communication service establishment",
            "use or consumption on demand by contract",
            "use or consumption on energy supplier establishment",
            "use or consumption of fuel transaction type exportation",
            "use or consumption on services",
            "fixed assets",
            "resale export",
            "resale icms exempt",
            "resale buyer under the same icmsSt tax rule",
            "transport of goods that don't need invoice (nf)"
          ],
          "description": "This is a enumeration folowing table"
        },
        "processScenario": {
          "type": "string",
          "maxLength": 60,
          "description": "Reference to process configurantion of this transaction, See ProcessScenario definition\nthis property is used only if eDocCreator=self or  eDocCreator=others and eDocCreatorPerspective=true\n"
        },
        "operationTypeReceiptMap": {
          "type": "string",
          "maxLength": 60,
          "description": "Mapping table used to discover the CFOP when execute the Tax receipt in funciotn of CFOP Received and Item Type\nthis property is used only if eDocCreator=others and eDocCreatorPerspective=false\n"
        },
        "legalReason": {
          "type": "object",
          "description": "Legal Reason for this tax scenario",
          "properties": {
            "id": {
              "type": "string",
              "description": "Internal ID"
            },
            "name": {
              "type": "string",
              "description": "Short name to this message"
            }
          }
        },
        "cfop": {
          "type": "integer",
          "description": "Fiscal Operation Code of transport service"
        },
        "overwrite": {
          "type": "string",
          "enum": [
            "all",
            "cfop",
            "proportional",
            "no"
          ],
          "description": "- 'all' # THE SYSTEM GET ALL INFORMATIONS PASSED IN TRANSACTION\n- 'cfop' # THE SYSTEM DISCOVRE AND REPLACE ONLY CFOP\n- 'proportional' # THE SYSTEM DISCOVER CFOP AND AND USES TAX VALUES FROM REFERENCED TRANSACTION, PROPORTINAL BY QUANTITY\n- 'no' # DEFAULT THE SYSTEM WILL CALCULATED ALL TAXES\n",
          "default": "no"
        },
        "hasStockImpact": {
          "type": "boolean",
          "description": "return if this transaction has stock impact for this process or CFOP"
        },
        "hasFinantialImpact": {
          "type": "boolean",
          "description": "return if this transaction has finantial impact for this process or CFOP"
        },
        "freightAmount": {
          "type": "number",
          "format": "double",
          "description": "This decimal 13 integers and 0 to 2 decimals"
        },
        "insuranceAmount": {
          "type": "number",
          "format": "double",
          "description": "This decimal 13 integers and 0 to 2 decimals"
        },
        "otherCostAmount": {
          "type": "number",
          "format": "double",
          "description": "This decimal 13 integers and 0 to 2 decimals"
        },
        "indTotType": {
          "type": "boolean",
          "default": true,
          "description": "The item value will compose the invoice total value."
        },
        "referencedItem": {
          "type": "object",
          "description": "order number, information used for B2B control process",
          "properties": {
            "refNFe": {
              "type": "string",
              "maxLength": 44,
              "pattern": "[0-9]{44}"
            },
            "lineCode": {
              "type": "integer",
              "description": "This identifier for this line in the transaction"
            }
          }
        },
        "orderNumber": {
          "type": "string",
          "minLength": 1,
          "maxLength": 15,
          "description": "order number, information used for B2B control process"
        },
        "orderItemNumber": {
          "type": "string",
          "pattern": "[0-9]{1,6}",
          "description": "number of the item from order number, information used for B2B control process"
        },
        "fciNumber": {
          "type": "string",
          "pattern": "[A-F0-9]{8}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{4}-[A-F0-9]{12}",
          "description": "Gloal Unique identifier (Importation form)"
        },
        "recopiNumber": {
          "type": "string",
          "maxLength": 20,
          "pattern": "[0-9]{20}",
          "description": "RECOPI number"
        },
        "infAdProd": {
          "type": "string",
          "maxLength": 500,
          "description": "additional information about product (referenced standard, complementary info, etc)"
        },
        "vehicle": {
          "$ref": "#/definitions/Vehicle"
        },
        "medicine": {
          "$ref": "#/definitions/Medicine"
        },
        "weapon": {
          "$ref": "#/definitions/Weapon"
        },
        "fuel": {
          "$ref": "#/definitions/Fuel"
        },
        "entityIsIcmsSubstitute": {
          "type": "boolean",
          "description": "Inform that for this item the Entity referenced is ICMS Substitute"
        },
        "isTransportIcmsWithheld": {
          "type": "boolean",
          "description": "Inform that this item has ICMS withheld for transport value service."
        },
        "icmsTaxRelief": {
          "type": "object",
          "required": [
            "reasonCode"
          ],
          "properties": {
            "reasonCode": {
              "type": "string",
              "enum": [
                "1",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "16"
              ],
              "description": "When item transaction subject to desoneration, this is the reason code\n- '1' # Táxi;\n- '3' # Produtor Agropecuário;\n- '4' # Frotista/Locadora;\n- '5' # Diplomático/Consular;\n- '6' # Utilitários e Motocicletas da Amazônia Ocidental e Áreas de Livre Comércio (Resolução 714/88 e 790/94 – CONTRAN e suas alterações);\n- '7' # SUFRAMA;\n- '8' # Venda a órgão Público;\n- '9' # Outros\n- '10' # Deficiente Condutor\n- '11' # Deficiente não condutor\n- '12' # Fomento agropecuário\n- '16' # Olimpíadas Rio 2016\n"
            },
            "taxBaseDiscount": {
              "type": "number",
              "format": "double",
              "description": "ICMS Tax base rate discount  (desconto na base do ICMS referetne a desoneração)"
            },
            "taxAmount": {
              "type": "number",
              "format": "double",
              "description": "Amount for Icms Relief (desoneração)"
            }
          }
        },
        "export": {
          "description": "Exportation detail",
          "type": "array",
          "maxItems": 500,
          "items": {
            "type": "object",
            "properties": {
              "drawbackNumber": {
                "type": "string",
                "maxLength": 11,
                "pattern": "[0-9]{0,11}"
              },
              "indExport": {
                "type": "object",
                "description": "indirect exportation",
                "required": [
                  "registerNumber",
                  "accessKey",
                  "quantity"
                ],
                "properties": {
                  "registerNumber": {
                    "type": "string",
                    "maxLength": 12,
                    "pattern": "[0-9]{0,12}",
                    "description": "Exportation register number"
                  },
                  "accessKey": {
                    "type": "string",
                    "maxLength": 44,
                    "pattern": "[0-9]{44}",
                    "description": "invoice access key received to export"
                  },
                  "quantity": {
                    "type": "number",
                    "format": "double",
                    "description": "This decimal 11 integers and 0 to 4 decimals, quantity exported in real"
                  }
                }
              }
            }
          }
        },
        "di": {
          "description": "Import declaration",
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "object",
            "required": [
              "diNumber",
              "registerDateDI",
              "clearanceSite",
              "clearanceState",
              "transportDIType",
              "intermediateType",
              "adi"
            ],
            "properties": {
              "customsValue": {
                "type": "number",
                "format": "double",
                "description": "customs value, valor aduaneiro (II Block of NFe)"
              },
              "diNumber": {
                "type": "string",
                "maxLength": 12,
                "minLength": 1,
                "description": "Import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)"
              },
              "registerDateDI": {
                "type": "string",
                "description": "Register date of import declaration number, DI/DSI/DA/DRI-E (DI/DSI/DA/DRI-E)"
              },
              "clearanceSite": {
                "type": "string",
                "maxLength": 60,
                "minLength": 1,
                "description": "Clerance Site\nLocal do desembaraço aduaneiro\n"
              },
              "clearanceState": {
                "$ref": "#/definitions/StateEnum",
                "description": "Clerance Site State\nEstado onde ocorrreu o desembaraço aduaneiro\n"
              },
              "clearanceDate": {
                "type": "string",
                "description": "Clerance date"
              },
              "transportDIType": {
                "description": "- '1' # Maritima\n- '2' # Fluvial\n- '3' # Lacustre\n- '4' # Aerea\n- '5' # Postal\n- '6' # Ferroviaria\n- '7' # Rodoviaria\n- '8' # Conduto\n- '9' # Meios Proprios\n- '10' # Entrada/Saida Ficta\n",
                "type": "string",
                "enum": [
                  "1",
                  "2",
                  "3",
                  "4",
                  "5",
                  "6",
                  "7",
                  "8",
                  "9",
                  "10"
                ]
              },
              "afrmmValue": {
                "type": "number",
                "format": "double",
                "description": "Aditional amount to freight to renew merchant marine, This decimal 13 integers and 2 decimals\n[Valor Adicional ao frete para renovação de marinha mercante]\n"
              },
              "intermediateType": {
                "description": "- '1' # On One's Own [1-por conta propria]\n- '2' # On Behalf And Order [2-por conta e ordem]\n- '3' # Order [3-encomenda]\n",
                "type": "string",
                "enum": [
                  "1",
                  "2",
                  "3"
                ]
              },
              "buyerFederalTaxID": {
                "type": "string",
                "pattern": "[0-9]{14}",
                "description": "Buyer federal tax id\nCNPJ do comprador ou encomendante\n"
              },
              "buyerState": {
                "$ref": "#/definitions/StateEnum",
                "description": "Buyer sate\nEstado do comprador ou encomendante\n"
              },
              "exporterCode": {
                "type": "string",
                "maxLength": 60,
                "minLength": 1,
                "description": "Exporter code"
              },
              "adi": {
                "type": "array",
                "maxItems": 100,
                "description": "aditional import declaration",
                "items": {
                  "type": "object",
                  "required": [
                    "addNumber",
                    "sequentialNumber",
                    "manufacturerCode"
                  ],
                  "properties": {
                    "addNumber": {
                      "type": "integer",
                      "description": "aditional sequence number (1 to 100)"
                    },
                    "sequentialNumber": {
                      "type": "integer",
                      "description": "sequential item number for this adi, sequence number (1 to 999)"
                    },
                    "manufacturerCode": {
                      "type": "string",
                      "maxLength": 60,
                      "minLength": 1,
                      "description": "Manufatorer erp internal code"
                    },
                    "adiDiscount": {
                      "type": "number",
                      "format": "double",
                      "description": "This decimal 13 integers and 2 decimals, aditional adi discount"
                    },
                    "drawbackNumber": {
                      "type": "string",
                      "pattern": "[0-9]{0,11}",
                      "minLength": 1,
                      "description": "Drawback number"
                    }
                  }
                }
              }
            }
          }
        },
        "calculatedTax": {
          "type": "object",
          "properties": {
            "taxByType": {
              "type": "object",
              "properties": {
                "icms": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsSt": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsStSd": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsPartOwn": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsPartDest": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsDifaFCP": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsDifaDest": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsDifaRemet": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsRf": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsDeson": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "icmsCredsn": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "pis": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "pisSt": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "cofins": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "cofinsSt": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "ipi": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "ipiReturned": {
                  "allOf": [
                    {
                      "$ref": "#/definitions/TaxByTypeTax"
                    },
                    {
                      "type": "object",
                      "properties": {
                        "calcBase": {
                          "type": "number",
                          "format": "double"
                        }
                      }
                    }
                  ]
                },
                "ii": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "iof": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "aproxtribState": {
                  "$ref": "#/definitions/TaxByTypeTax"
                },
                "aproxtribFed": {
                  "$ref": "#/definitions/TaxByTypeTax"
                }
              }
            },
            "tax": {
              "type": "number",
              "format": "double"
            },
            "details": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DetailsCalculatedTaxItem"
              }
            }
          }
        }
      }
    },
    "EntityForGoods": {
      "allOf": [
        {
          "$ref": "#/definitions/Entity"
        },
        {
          "type": "object",
          "properties": {
            "icmsTaxPayer": {
              "type": "boolean",
              "description": "Inform if the entity is ICMS tax payer."
            }
          }
        }
      ]
    },
    "NRef": {
      "description": "Referenced Invoices\nThe invoice can be one of this types,\n- 'refNFe - Eletronic Invoice'\n- 'refCTE - Transport Invoice'\n- 'refECF - Reatail Cupom'\n- 'refNF  - Invoice model 1 or 1A'\n- 'refFarmerNF - farmer invoice'\n",
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "refNFe",
            "refCTE",
            "refECF",
            "refNF",
            "refFarmerNF"
          ]
        },
        "refNFe": {
          "type": "string",
          "maxLength": 44,
          "pattern": "[0-9]{44}"
        },
        "refCTe": {
          "type": "string",
          "maxLength": 44,
          "pattern": "[0-9]{44}"
        },
        "refECF": {
          "type": "object",
          "required": [
            "nECF",
            "nCOO",
            "modECF"
          ],
          "properties": {
            "nECF": {
              "description": "ECF Sequential number that generated Cupom attached to NFe\ninformar o número de ordem seqüencial do ECF que emitiu o Cupom Fiscal vinculado à NF-e\n",
              "type": "string",
              "pattern": "[0-9]{1,3}"
            },
            "nCOO": {
              "description": "Operational counter number attached to NFe\nInformar o Número do Contador de Ordem de Operação - COO vinculado à NF-e\n",
              "type": "string",
              "pattern": "[0-9]{1,6}"
            },
            "modECF": {
              "description": "Fiscal document model\n- '2B' # coupon tax not ECF\n- '2C' # PDV coupon tax\n- '2D' # ECF coupon tax\n",
              "type": "string",
              "enum": [
                "2B",
                "2C",
                "2D"
              ]
            }
          }
        },
        "refNF": {
          "type": "object",
          "required": [
            "stateCd",
            "yymm",
            "federalTaxId",
            "serie",
            "number"
          ],
          "properties": {
            "stateCd": {
              "description": "State code of fiscal Document creator",
              "$ref": "#/definitions/StateEnum"
            },
            "yymm": {
              "description": "year and month of fiscal document creation",
              "type": "string",
              "pattern": "[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}"
            },
            "federalTaxId": {
              "description": "fiscal document creator federalTaxId",
              "type": "string",
              "pattern": "[0-9]{14}"
            },
            "serie": {
              "description": "fiscal document serie",
              "type": "string",
              "pattern": "0|[1-9]{1}[0-9]{0,2}"
            },
            "number": {
              "description": "fiscal document number",
              "type": "string",
              "pattern": "[1-9]{1}[0-9]{0,8}"
            }
          }
        },
        "refFarmerNF": {
          "type": "object",
          "required": [
            "stateCd",
            "yymm",
            "federalTaxId",
            "stateTaxId",
            "model",
            "serie",
            "number"
          ],
          "properties": {
            "stateCd": {
              "description": "State code of fiscal Document creator, farmer",
              "$ref": "#/definitions/StateEnum"
            },
            "yymm": {
              "description": "year and month of fiscal document creation",
              "type": "string",
              "pattern": "[0-9]{2}[0]{1}[1-9]{1}|[0-9]{2}[1]{1}[0-2]{1}"
            },
            "federalTaxId": {
              "description": "fiscal document creator farmer federalTaxId",
              "type": "string",
              "pattern": "[0-9]{14}"
            },
            "stateTaxId": {
              "description": "fiscal document creator, farmer stateTaxId",
              "type": "string",
              "pattern": "[0-9]{14}"
            },
            "model": {
              "description": "Document Fiscal model\n- '04' # FARMER DOCUMENT\n- '01' # DETACHED DOCUMENT - AVULSO\n",
              "type": "string",
              "enum": [
                "04",
                "01"
              ]
            },
            "serie": {
              "description": "fiscal document serie",
              "type": "string",
              "pattern": "0|[1-9]{1}[0-9]{0,2}"
            },
            "number": {
              "description": "fiscal document number",
              "type": "string",
              "pattern": "[1-9]{1}[0-9]{0,8}"
            }
          }
        }
      }
    },
    "Payment": {
      "type": "object",
      "properties": {
        "installmentsTerms": {
          "type": "integer",
          "enum": [
            0,
            1,
            2
          ],
          "description": "Installment terms\n- 0 # cash\n- 1 # on terms\n- 2 # other\n"
        },
        "bill": {
          "description": "Bill information",
          "type": "object",
          "properties": {
            "nFat": {
              "description": "Bill identifier",
              "type": "string",
              "maxLength": 60,
              "minLength": 1
            },
            "vOrig": {
              "description": "Orignal value",
              "type": "number",
              "format": "double"
            },
            "vDiscount": {
              "description": "Discount",
              "type": "number",
              "format": "double"
            },
            "vNet": {
              "description": "Net value",
              "type": "number",
              "format": "double"
            }
          }
        },
        "installment": {
          "type": "array",
          "maxItems": 120,
          "items": {
            "type": "object",
            "required": [
              "grossValue"
            ],
            "properties": {
              "documentNumber": {
                "type": "string",
                "maxLength": 60,
                "minLength": 1,
                "description": "Instalment number identifier"
              },
              "date": {
                "type": "string",
                "description": "Installment expiration date"
              },
              "grossValue": {
                "type": "number",
                "format": "double",
                "description": "Installment value"
              }
            }
          }
        },
        "paymentMode": {
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "object",
            "required": [
              "mode",
              "value"
            ],
            "properties": {
              "mode": {
                "type": "string",
                "enum": [
                  "01",
                  "02",
                  "03",
                  "04",
                  "05",
                  "10",
                  "11",
                  "12",
                  "13",
                  "99"
                ],
                "description": "Payment mode\n- '01' # Dinheiro\n- '02' # Cheque\n- '03' # Cartão de Crédito\n- '04' # Cartão de Débito\n- '05' # Crédito Loja\n- '10' # Vale Alimentação\n- '11' # Vale Refeição\n- '12' # Vale Presente\n- '13' # Vale Combustível\n- '99' # Outros\n"
              },
              "value": {
                "type": "number",
                "format": "double",
                "description": "payment value"
              },
              "cardTpIntegration": {
                "type": "string",
                "enum": [
                  "1",
                  "2"
                ],
                "description": "- '1' # Payment integrated with system,\n- '2' # Payment not integrated with system\n"
              },
              "cardCNPJ": {
                "type": "string",
                "pattern": "[0-9]{14}",
                "description": "Federal tax id of accrediting card (credenciadora do cartão)"
              },
              "cardBrand": {
                "type": "string",
                "enum": [
                  "01",
                  "02",
                  "03",
                  "04",
                  "99"
                ],
                "description": "card brand\n- '01' # Visa\n- '02' # Mastercard\n- '03' # American Express\n- '04' # Sorocred\n- '99' # Other\n"
              },
              "cardAuthorization": {
                "description": "transaction authorization number",
                "type": "string",
                "maxLength": 20,
                "minLength": 1
              }
            }
          }
        }
      }
    },
    "PurchaseInfo": {
      "type": "object",
      "properties": {
        "governmentOrder": {
          "description": "Invoice info for government purchase orders\nInformação da Nota de Empenho de compras públicas\n",
          "type": "string",
          "maxLength": 22,
          "minLength": 1
        },
        "orderNumber": {
          "description": "Order info\nInformação do pedido\n",
          "type": "string",
          "maxLength": 60,
          "minLength": 1
        },
        "contractNumber": {
          "description": "Agreement info\nInformação do contrato\n",
          "type": "string",
          "maxLength": 60,
          "minLength": 1
        }
      }
    },
    "ExportInfo": {
      "description": "Export information",
      "type": "object",
      "required": [
        "shippingState",
        "place"
      ],
      "properties": {
        "shippingState": {
          "description": "shipping state",
          "$ref": "#/definitions/StateEnum"
        },
        "place": {
          "description": "shipping place",
          "type": "string",
          "maxLength": 60,
          "minLength": 1
        },
        "placeDescription": {
          "description": "description of shipping place",
          "type": "string",
          "maxLength": 60,
          "minLength": 1
        }
      }
    },
    "DefaultLocations": {
      "type": "object",
      "description": "This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. These locations may be overridden within each line item. The key for each location in the dictionary is the location 'purpose'. Valid locations purposes are 'ShipFrom', 'ShipTo', 'POS', 'POM', 'POO', 'BillingLocation', 'CallPlaced', 'CallReceived', 'ServiceRendered', 'POA' and 'FirstUse'. There can only be one location of a given purpose in the dictionary.",
      "properties": {
        "entity": {
          "$ref": "#/definitions/EntityLocation"
        },
        "company": {
          "$ref": "#/definitions/EntityLocation"
        },
        "transporter": {
          "$ref": "#/definitions/EntityLocation"
        },
        "deliveryLocation": {
          "$ref": "#/definitions/EntityLocation"
        },
        "pickupLocation": {
          "$ref": "#/definitions/EntityLocation"
        }
      }
    },
    "Transport": {
      "required": [
        "modFreight"
      ],
      "properties": {
        "modFreight": {
          "type": "string",
          "enum": [
            "CIF",
            "FOB",
            "Thridparty",
            "FreeShipping"
          ],
          "description": "Freight model \n- 0 - CIF, \n- 1 - FOB, \n- 2 - Thrid party,\n- 9 - Free shipping\nwhen 9 - Free shipping, the fields below will be ignored if present\n- 'transporter'\n- 'withholdICMSTransport'\n- 'volumes'\n- 'vehicle'\n"
        },
        "withholdICMSTransport": {
          "type": "boolean",
          "description": "Forces witholding of ICMS on transport amount (freight)"
        },
        "volumes": {
          "type": "array",
          "maxItems": 5000,
          "description": "Packages",
          "items": {
            "type": "object",
            "properties": {
              "qVol": {
                "type": "string",
                "pattern": "[0-9]{1,15}",
                "description": "Quantity of packages transported"
              },
              "specie": {
                "type": "string",
                "minLength": 1,
                "maxLength": 60,
                "description": "package type"
              },
              "brand": {
                "type": "string",
                "minLength": 1,
                "maxLength": 60,
                "description": "brand"
              },
              "volumeNumeration": {
                "type": "string",
                "minLength": 1,
                "maxLength": 60,
                "description": "packages numeration"
              },
              "netWeight": {
                "type": "number",
                "format": "double",
                "description": "net weight using Kg"
              },
              "grossWeight": {
                "type": "number",
                "format": "double",
                "description": "gross weight using Kg"
              },
              "seal": {
                "type": "array",
                "maxItems": 5000,
                "items": {
                  "type": "string"
                }
              }
            }
          }
        },
        "vehicle": {
          "$ref": "#/definitions/VehicleTransp"
        }
      }
    },
    "AdditionalInformation": {
      "type": "object",
      "properties": {
        "fiscalInfo": {
          "type": "string",
          "maxLength": 2000,
          "pattern": "[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}",
          "description": "Additional information of fiscal interest"
        },
        "complementaryInfo": {
          "type": "string",
          "maxLength": 5000,
          "pattern": "[!-ÿ]{1}[ -ÿ]{0,}[!-ÿ]{1}|[!-ÿ]{1}",
          "description": "Additional information of user interest"
        },
        "procRef": {
          "description": "Referenced Process",
          "type": "array",
          "maxItems": 100,
          "items": {
            "type": "object",
            "properties": {
              "nProc": {
                "type": "string",
                "maxLength": 60,
                "description": "Process Identifier"
              },
              "indProc": {
                "type": "string",
                "enum": [
                  "0",
                  "1",
                  "2",
                  "3",
                  "9"
                ],
                "description": "Process Origin\n- '0' # SEFAZ;\n- '1' # Justiça Federal;\n- '2' # Justiça Estadual;\n- '3' # Secex/RFB;\n- '9' # Outros\n"
              }
            }
          }
        }
      }
    },
    "Entity": {
      "type": "object",
      "required": [
        "type",
        "federalTaxId"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Entity name, official name (Razão Social)"
        },
        "role": {
          "description": "- 'transporter'\n- 'sender' # REMETENTE\n- 'dispatcher' # EXPEDITOR\n- 'receiver' # RECEIVER\n- 'addressee' # DESTINATÁRIO\n- 'other' # OUTRO\n",
          "type": "string",
          "enum": [
            "transporter",
            "sender",
            "dispatcher",
            "receiver",
            "addressee",
            "other"
          ]
        },
        "type": {
          "$ref": "#/definitions/EntityType"
        },
        "federalTaxId": {
          "type": "string",
          "pattern": "([!-ÿ]{0}|[!-ÿ]{5,20})?",
          "description": "CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'"
        },
        "cityTaxId": {
          "type": "string",
          "maxLength": 15,
          "description": "City Tax ID"
        },
        "stateTaxId": {
          "type": "string",
          "pattern": "[0-9]{2,14}|ISENTO",
          "description": "State Tax ID"
        },
        "suframa": {
          "type": "string",
          "pattern": "[0-9]{8,9}",
          "description": "Suframa ID"
        },
        "phone": {
          "type": "string",
          "pattern": "[0-9]{6,14}",
          "description": "Entity Phone"
        },
        "taxRegime": {
          "type": "string",
          "enum": [
            "realProfit",
            "estimatedProfit",
            "simplified",
            "simplifiedOverGrossthreshold",
            "simplifiedEntrepreneur",
            "notApplicable",
            "individual"
          ]
        },
        "email": {
          "type": "string",
          "maxLength": 60,
          "description": "Entity Email"
        },
        "subjectToSRF1234": {
          "type": "boolean",
          "description": "Companies subject to follow same rules of Government entities (Instrução Normativa SRF1234)"
        },
        "subjectToPayrollTaxRelief": {
          "type": "boolean",
          "description": "Sujeito à desoneração de folha de pagamento."
        }
      }
    },
    "EntityType": {
      "type": "string",
      "enum": [
        "business",
        "individual",
        "federalGovernment",
        "stateGovernment",
        "cityGovernment",
        "foreign"
      ],
      "description": "Entity Type (business, individual, federal government, state government, city government, foreign)"
    },
    "StateEnum": {
      "type": "string",
      "maxLength": 2,
      "enum": [
        "AC",
        "AL",
        "AP",
        "AM",
        "BA",
        "CE",
        "DF",
        "ES",
        "GO",
        "MA",
        "MT",
        "MS",
        "MG",
        "PA",
        "PB",
        "PR",
        "PE",
        "PI",
        "RJ",
        "RN",
        "RS",
        "RO",
        "RR",
        "SC",
        "SP",
        "SE",
        "TO"
      ],
      "description": "State Abreviation:\n- 'AC'\n- 'AL'\n- 'AP'\n- 'AM'\n- 'BA'\n- 'CE'\n- 'DF'\n- 'ES'\n- 'GO'\n- 'MA'\n- 'MT'\n- 'MS'\n- 'MG'\n- 'PA'\n- 'PB'\n- 'PR'\n- 'PE'\n- 'PI'\n- 'RJ'\n- 'RN'\n- 'RS'\n- 'RO'\n- 'RR'\n- 'SC'\n- 'SP'\n- 'SE'\n- 'TO'\n"
    },
    "EntityLocation": {
      "title": "Address",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "zipcode"
          ],
          "properties": {
            "street": {
              "type": "string",
              "maxLength": 60,
              "description": "Street Name"
            },
            "neighborhood": {
              "type": "string",
              "maxLength": 60,
              "description": "Neighborhood Name"
            },
            "zipcode": {
              "type": "string",
              "description": "Zip Code"
            },
            "cityCode": {
              "type": "string",
              "pattern": "[0-9]{7}|0",
              "description": "City Code",
              "default": "0"
            },
            "cityName": {
              "type": "string",
              "maxLength": 60,
              "description": "City Name"
            },
            "state": {
              "type": "string",
              "description": "State Code",
              "pattern": "^([A-Z]{2,3})$"
            },
            "countryCode": {
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "description": "Country Code",
              "default": "0"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes",
              "pattern": "^([A-Z]{3})$"
            },
            "number": {
              "type": "string",
              "maxLength": 60,
              "description": "House number"
            },
            "complement": {
              "type": "string",
              "maxLength": 60,
              "description": "Any other information about the address (Room, Suite, Floor, etc))."
            },
            "phone": {
              "type": "string",
              "pattern": "^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$",
              "description": "Phone number"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "zipcode",
            "cityCode",
            "state"
          ],
          "properties": {
            "street": {
              "type": "string",
              "maxLength": 60,
              "description": "Street Name"
            },
            "neighborhood": {
              "type": "string",
              "maxLength": 60,
              "description": "Neighborhood Name"
            },
            "zipcode": {
              "type": "string",
              "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
              "description": "Brazilian Zip Code"
            },
            "cityCode": {
              "type": "string",
              "pattern": "^(\\d{7})$",
              "description": "City Code (IBGE)"
            },
            "cityName": {
              "type": "string",
              "maxLength": 60,
              "description": "City Name"
            },
            "state": {
              "$ref": "#/definitions/StateEnum"
            },
            "countryCode": {
              "type": "string",
              "pattern": "[0-9]{1,4}",
              "description": "Country Code",
              "default": "0"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes",
              "pattern": "^([A-Z]{3})$",
              "default": "BRA"
            }
          }
        },
        {
          "title": "Address",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "zipcode"
              ],
              "properties": {
                "street": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Street Name"
                },
                "neighborhood": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Neighborhood Name"
                },
                "zipcode": {
                  "type": "string",
                  "description": "Zip Code"
                },
                "cityCode": {
                  "type": "string",
                  "pattern": "[0-9]{7}|0",
                  "description": "City Code",
                  "default": "0"
                },
                "cityName": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "City Name"
                },
                "state": {
                  "type": "string",
                  "description": "State Code",
                  "pattern": "^([A-Z]{2,3})$"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "[0-9]{1,4}",
                  "description": "Country Code",
                  "default": "0"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes",
                  "pattern": "^([A-Z]{3})$"
                },
                "number": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "House number"
                },
                "complement": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Any other information about the address (Room, Suite, Floor, etc))."
                },
                "phone": {
                  "type": "string",
                  "pattern": "^(\\d{6,14}|\\(\\d{2}\\)\\s*\\d{4,5}-*\\d{4})$",
                  "description": "Phone number"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "zipcode",
                "cityCode",
                "state"
              ],
              "properties": {
                "street": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Street Name"
                },
                "neighborhood": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Neighborhood Name"
                },
                "zipcode": {
                  "type": "string",
                  "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
                  "description": "Brazilian Zip Code"
                },
                "cityCode": {
                  "type": "string",
                  "pattern": "^(\\d{7})$",
                  "description": "City Code (IBGE)"
                },
                "cityName": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "City Name"
                },
                "state": {
                  "$ref": "#/definitions/StateEnum"
                },
                "countryCode": {
                  "type": "string",
                  "pattern": "[0-9]{1,4}",
                  "description": "Country Code",
                  "default": "0"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes",
                  "pattern": "^([A-Z]{3})$",
                  "default": "BRA"
                }
              }
            }
          ]
        }
      ]
    },
    "VehicleTransp": {
      "type": "object",
      "description": "Identify type of vehicle used to transport\nthe attributes, except atribute type,  follow rule oneOf then only one of this atributes will be informed.\n",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "automobile",
            "wagon",
            "ferry",
            "trailer"
          ]
        },
        "automobile": {
          "$ref": "#/definitions/VehicleID"
        },
        "trailer": {
          "description": "Trailer",
          "type": "array",
          "maxItems": 5,
          "items": {
            "$ref": "#/definitions/VehicleID"
          }
        },
        "wagon": {
          "type": "string",
          "minLength": 1,
          "maxLength": 20
        },
        "ferry": {
          "description": "Ferry",
          "type": "string",
          "minLength": 1,
          "maxLength": 20
        }
      }
    },
    "VehicleID": {
      "type": "object",
      "required": [
        "licensePlate",
        "stateCode"
      ],
      "properties": {
        "licensePlate": {
          "type": "string",
          "pattern": "[A-Z]{2,3}[0-9]{4}|[A-Z]{3,4}[0-9]{3}"
        },
        "stateCode": {
          "$ref": "#/definitions/StateEnum"
        },
        "rtnc": {
          "type": "string",
          "maxLength": 20,
          "description": "Cargo Transport National Register, Registro Nacional de Transportador de Carga (ANTT)"
        }
      }
    },
    "DetailsCalculatedTaxItem": {
      "allOf": [
        {
          "$ref": "#/definitions/DetailsCalculatedTax"
        },
        {
          "type": "object",
          "description": "Details",
          "properties": {
            "source": {
              "$ref": "#/definitions/CSTTableAEnum"
            },
            "cstB": {
              "$ref": "#/definitions/CSTTableBEnum"
            },
            "cst": {
              "type": "string"
            },
            "modBC": {
              "type": "string"
            },
            "pMVA": {
              "type": "number",
              "format": "double",
              "description": "Percent of Value-added margin (%)"
            },
            "pRedBC": {
              "type": "number",
              "format": "double",
              "description": "calc base percent of discount"
            },
            "pBCOp": {
              "type": "number",
              "format": "double",
              "description": "percent of calc base of own icms"
            },
            "ufst": {
              "$ref": "#/definitions/StateEnum"
            },
            "calcMode": {
              "$ref": "#/definitions/CalcModelEnum"
            },
            "legalTaxClass": {
              "type": "integer",
              "description": "Legal tax classificação for IPI (enquadramento tributário)"
            },
            "legalTaxClassDC": {
              "type": "integer",
              "description": "Legal tax classificação for IPI (enquadramento) for Drinks and Cigarettes"
            },
            "cnpjProd": {
              "type": "string",
              "pattern": "([!-ÿ]{0}|[!-ÿ]{5,20})?",
              "description": "CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'\nFederal tax ID of real manufacturer, nly for exportation\n"
            },
            "sealCode": {
              "type": "string",
              "maxLength": 60,
              "description": "Seal Code for ipi tax control (código do selo para controle de IPI)"
            },
            "sealQuantity": {
              "type": "string",
              "pattern": "[0-9]{1,12}",
              "description": "Seal Code for ipi tax control (código do selo para controle de IPI)"
            },
            "icmsInterPartRate": {
              "type": "number",
              "format": "double",
              "description": "percent of icms apportionment between two states"
            },
            "icmsSesonReason": {
              "$ref": "#/definitions/ICMSSesonReason"
            },
            "perQuantityReturned": {
              "type": "number",
              "format": "double",
              "description": "percent of merchandise returned"
            }
          }
        }
      ]
    },
    "TaxByTypeTax": {
      "type": "object",
      "required": [
        "tax"
      ],
      "properties": {
        "tax": {
          "type": "number",
          "format": "double",
          "description": "Tax value, negative value for withhold value"
        }
      }
    },
    "Vehicle": {
      "type": "object",
      "required": [
        "tpOp",
        "chassisNumber",
        "colorCode",
        "colorName",
        "cvPower",
        "cylinderVolumCC",
        "netWeight",
        "grossWeight",
        "serialNumber",
        "fuelType",
        "engineNumber",
        "cmt",
        "lengthBetweenAxis",
        "modelYear",
        "manufactoryYear",
        "paintType",
        "vehicleRENAVAMType",
        "specieRENAVAMType",
        "modelRENAVAMCode",
        "colorDENATRANCode",
        "vin",
        "vehicleManufactoryStatus",
        "maxOccupantsQuantity",
        "restrictionType"
      ],
      "properties": {
        "tpOp": {
          "description": "- 1 # Sales by car dealership\n- 2 # Direct billing\n- 3 # Direct sales\n- 0 # Other\n",
          "type": "integer",
          "enum": [
            1,
            2,
            3,
            0
          ]
        },
        "chassisNumber": {
          "type": "string",
          "maxLength": 17,
          "pattern": "[A-Z0-9]+"
        },
        "colorCode": {
          "type": "string",
          "maxLength": 17,
          "description": "color code used by factory"
        },
        "colorName": {
          "type": "string",
          "maxLength": 40,
          "description": "color name"
        },
        "cvPower": {
          "type": "string",
          "maxLength": 4,
          "description": "Power using CV unid"
        },
        "cylinderVolumCC": {
          "type": "string",
          "maxLength": 4,
          "description": "engine size in cubic centimeters"
        },
        "netWeight": {
          "type": "string",
          "maxLength": 9,
          "description": "net weight"
        },
        "grossWeight": {
          "type": "string",
          "maxLength": 9,
          "description": "gross weight"
        },
        "serialNumber": {
          "type": "string",
          "maxLength": 9,
          "description": "serie"
        },
        "fuelType": {
          "description": "- '01' # Alcohol\n- '02' # Gas\n- '03' # Diesel\n- '16' # Alcohol/Gas\n- '17' # Gas/Alcohol/GNV\n- '18' # Gas/Electric\n",
          "type": "string",
          "enum": [
            "01",
            "02",
            "03",
            "16",
            "17",
            "18"
          ]
        },
        "engineNumber": {
          "type": "string",
          "maxLength": 21,
          "description": "engine number"
        },
        "cmt": {
          "type": "string",
          "maxLength": 9,
          "description": "traction capacity, tonne"
        },
        "lengthBetweenAxis": {
          "type": "string",
          "maxLength": 4,
          "description": "length between axis"
        },
        "modelYear": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "model year"
        },
        "manufactoryYear": {
          "type": "string",
          "pattern": "[0-9]{4}",
          "description": "year of factory"
        },
        "paintType": {
          "type": "string",
          "maxLength": 1,
          "description": "paynt type"
        },
        "vehicleRENAVAMType": {
          "type": "string",
          "pattern": "[0-9]{1,2}"
        },
        "specieRENAVAMType": {
          "type": "string",
          "pattern": "[0-9]{1}"
        },
        "modelRENAVAMCode": {
          "type": "string",
          "pattern": "[0-9]{1,6}"
        },
        "colorDENATRANCode": {
          "description": "- '01' # YELLOW\n- '02' # BLUE\n- '03' # BEIGE\n- '04' # WHITE\n- '05' # GRAY\n- '06' # GOLDEN\n- '07' # GRENA\n- '08' # ORANGE\n- '09' # BROWN\n- '10' # SILVER\n- '11' # BLACK\n- '12' # PINK\n- '13' # PURPLE\n- '14' # GREEN\n- '15' # RED\n- '16' # FANTASY\n",
          "type": "string",
          "pattern": "[0-9]{1,2}",
          "enum": [
            "01",
            "02",
            "03",
            "04",
            "05",
            "06",
            "07",
            "08",
            "09",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16"
          ]
        },
        "vin": {
          "type": "string",
          "enum": [
            "R",
            "N"
          ],
          "description": "chassis condition original or modified (remarcado)"
        },
        "vehicleManufactoryStatus": {
          "description": "- '1' # Finished(Done)\n- '2' # Not finished\n- '3' # Semi-finished\n",
          "type": "string",
          "enum": [
            "1",
            "2",
            "3"
          ]
        },
        "maxOccupantsQuantity": {
          "type": "string",
          "maxLength": 3,
          "format": "[0-9]{1,3}",
          "description": "max number of sit occupants"
        },
        "restrictionType": {
          "description": "Lien/restriction type\n- '0' # No one;\n- '1' # Alienação Fiduciária;\n- '2' # Arrendamento Mercantil;\n- '3' # Reserva de Domínio;\n- '4' # Penhor de Veículos;\n- '9' # Other.\n",
          "type": "string",
          "enum": [
            "0",
            "1",
            "2",
            "3",
            "4",
            "9"
          ]
        }
      }
    },
    "Medicine": {
      "type": "object",
      "required": [
        "loteNumber",
        "loteQuantity",
        "manufactotyDate",
        "expirationDate",
        "maxValueToEndUser"
      ],
      "properties": {
        "loteNumber": {
          "type": "string",
          "maxLength": 20
        },
        "loteQuantity": {
          "type": "number",
          "format": "double",
          "description": "This is a decimal type with 11 digits including 3 decimal positions."
        },
        "manufactotyDate": {
          "type": "string"
        },
        "expirationDate": {
          "type": "string"
        },
        "maxValueToEndUser": {
          "type": "number",
          "format": "double",
          "description": "This is a decimal type with 15 digits including 2 decimal positions.  Max value to end user."
        }
      }
    },
    "Weapon": {
      "type": "object",
      "required": [
        "weaponRestrictionType",
        "serieNumber",
        "gunBarrelSerieNumber",
        "weaponDescription"
      ],
      "properties": {
        "weaponRestrictionType": {
          "description": "- '0' # restrict use\n- '1' # public use\n",
          "type": "string",
          "enum": [
            "0",
            "1"
          ]
        },
        "serieNumber": {
          "type": "string",
          "maxLength": 15
        },
        "gunBarrelSerieNumber": {
          "type": "string",
          "maxLength": 15,
          "description": "Barrel's serial number.\nNúmero de série do cano\n"
        },
        "weaponDescription": {
          "type": "string",
          "maxLength": 256,
          "description": "weapon description"
        }
      }
    },
    "Fuel": {
      "type": "object",
      "required": [
        "prodANPCode",
        "stateCodeOfUndUser"
      ],
      "properties": {
        "prodANPCode": {
          "type": "string",
          "pattern": "[0-9]{9}"
        },
        "perMixGN": {
          "type": "number",
          "format": "double",
          "description": "percentage of natural gas (GLP)"
        },
        "authorizationCodeCODIF": {
          "type": "string",
          "pattern": "[0-9]{1,21}"
        },
        "quantityOnRoomTemperature": {
          "type": "number",
          "format": "double",
          "description": "This decimal 12 integers and 0 to 4 decimals\nQuantidade de combustível faturada à temperatura ambiente.\nInformar quando a quantidade faturada informada no campo qCom (I10) tiver sido ajustada para\numa temperatura diferente da ambiente.\n"
        },
        "stateCodeOfUndUser": {
          "$ref": "#/definitions/StateEnum",
          "description": "state where fuel was used"
        },
        "cide": {
          "type": "object",
          "required": [
            "baseCalcCIDE",
            "rateCIDE",
            "valueCIDE"
          ],
          "properties": {
            "baseCalcCIDE": {
              "type": "number",
              "format": "double",
              "description": "percentage of natural gas (GLP), this decimal 12 integers and 0 to 4 decimals"
            },
            "rateCIDE": {
              "type": "number",
              "format": "double",
              "description": "percentage of natural gas (GLP), this decimal 11 integers and 0 to 4 decimals - R$"
            },
            "valueCIDE": {
              "type": "number",
              "format": "double",
              "description": "percentage of natural gas (GLP), this decimal 13 integers and 2 decimals - R$"
            }
          }
        },
        "pumpNumber": {
          "type": "object",
          "required": [
            "nozzleNumberFuelSupply",
            "fuelPumpNumber",
            "fuelTankNumber",
            "startValueOfPumpNumber",
            "endValueOfPumpNumber"
          ],
          "properties": {
            "nozzleNumberFuelSupply": {
              "type": "string",
              "pattern": "[0-9]{1,3}",
              "description": "Identification number of nozzle used in the dispensing process.  \nNumero de identificação do Bico utilizado no abastecimento\n"
            },
            "fuelPumpNumber": {
              "type": "string",
              "pattern": "[0-9]{1,3}",
              "description": "Identification number of the Pump connect to the used nozzle.  \nNumero de identificação da bomba ao qual o bico está interligado\n"
            },
            "fuelTankNumber": {
              "type": "string",
              "pattern": "[0-9]{1,3}",
              "description": "Identification number of the Pump connect to the used nozzle.  \nNumero de identificação da bomba ao qual o bico está interligado\n"
            },
            "startValueOfPumpNumber": {
              "type": "number",
              "format": "double",
              "description": "Valor do Encerrante no ínicio do abastecimento. \nReading of auto-counter (encerrante) at the start of the refueling/dispensing.\nThis decimal 12 integers and 3 decimals - R$\n"
            },
            "endValueOfPumpNumber": {
              "type": "number",
              "format": "double",
              "description": "Valor do Encerrante no final do abastecimento. \nReading of auto-counter (encerrante) at the end of the refueling/dispensing.\nThis decimal 12 integers and 3 decimals - R$\n"
            }
          }
        }
      }
    },
    "DetailsCalculatedTax": {
      "type": "object",
      "properties": {
        "locationType": {
          "type": "string",
          "description": "This string captures the applicable location type. Location used for calc. Buyer or Seller"
        },
        "jurisdictionName": {
          "type": "string",
          "description": "Jurisdiction used for calctax amount"
        },
        "jurisdictionType": {
          "type": "string",
          "enum": [
            "City",
            "State",
            "Country"
          ],
          "description": "Type of jurisdiction\n- 'City'\n- 'State'\n- 'Country'\n",
          "default": "Country"
        },
        "taxImpact": {
          "type": "object",
          "properties": {
            "impactOnFinalPrice": {
              "type": "string",
              "enum": [
                "Add",
                "Included",
                "Subtracted",
                "Informative"
              ]
            },
            "impactOnNetAmount": {
              "type": "string",
              "enum": [
                "Add",
                "Included",
                "Subtracted",
                "Informative"
              ]
            },
            "accounting": {
              "type": "string",
              "description": "Escrituração",
              "enum": [
                "liability",
                "asset",
                "none"
              ]
            }
          }
        },
        "taxType": {
          "type": "string",
          "enum": [
            "icms",
            "icmsSt",
            "icmsStSd",
            "icmsPartOwn",
            "icmsPartDest",
            "icmsDifaFCP",
            "icmsDifaDest",
            "icmsDifaRemet",
            "icmsRf",
            "icmsDeson",
            "icmsCredsn",
            "pis",
            "pisSt",
            "cofins",
            "cofinsSt",
            "ipi",
            "ipiReturned",
            "ii",
            "iof",
            "aproxtribCity",
            "aproxtribState",
            "aproxtribFed",
            "aproxtrib"
          ],
          "description": "Tax identificator"
        },
        "rateType": {
          "type": "string",
          "description": "Name of configuration rate"
        },
        "scenario": {
          "type": "string",
          "description": "This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in."
        },
        "subtotalTaxable": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax, calc base"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures the tax rate for this tax.3.00 (3%)"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax"
        },
        "legalReason": {
          "type": "object",
          "description": "Legal Reason for this tax scenario",
          "properties": {
            "id": {
              "type": "string",
              "description": "Internal ID"
            },
            "name": {
              "type": "string",
              "description": "Short name to this message"
            }
          }
        },
        "significantLocations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This element captures the list of locations that contributed to the tax determination. for Service is Buyer and Seller Address"
        },
        "taxRuleType": {
          "type": "string",
          "enum": [
            "SELLER",
            "BUYER",
            "TRANSACTION",
            "ITEM",
            "TAX"
          ],
          "description": "This string with type of rule"
        }
      }
    },
    "CalcModelEnum": {
      "type": "string",
      "enum": [
        "rate",
        "quantity"
      ]
    },
    "CSTPistCofinsEnum": {
      "type": "string",
      "enum": [
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "49",
        "50",
        "51",
        "52",
        "53",
        "54",
        "55",
        "56",
        "60",
        "61",
        "62",
        "63",
        "64",
        "65",
        "66",
        "67",
        "70",
        "71",
        "72",
        "73",
        "74",
        "75",
        "98",
        "99"
      ],
      "description": "Use to determined how the tax is applicable and calculated. It may define and exemption, a tax base reduction, identify that a special rate is applicable (not the rate itself).\n- '01' # Operação Tributável com Alíquota Básica\n- '02' # Operação Tributável com Alíquota Diferenciada\n- '03' # Operação Tributável com Alíquota por Unidade de Medida de Produto\n- '04' # Operação Tributável Monofásica - 'Revenda a Alíquota Zero\n- '05' # Operação Tributável por Substituição Tributária\n- '06' # Operação Tributável a Alíquota Zero\n- '07' # Operação Isenta da Contribuição\n- '08' # Operação sem Incidência da Contribuição\n- '09' # Operação com Suspensão da Contribuição\n- '49' # Outras Operações de Saída\n- '50' # Operação com Direito a Crédito - 'Vinculada Exclusivamente a Receita Tributada no Mercado Interno\n- '51' # Operação com Direito a Crédito – Vinculada Exclusivamente a Receita Não Tributada no Mercado Interno\n- '52' # Operação com Direito a Crédito - 'Vinculada Exclusivamente a Receita de Exportação\n- '53' # Operação com Direito a Crédito - 'Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno\n- '54' # Operação com Direito a Crédito - 'Vinculada a Receitas Tributadas no Mercado Interno e de Exportação\n- '55' # Operação com Direito a Crédito - 'Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação\n- '56' # Operação com Direito a Crédito - 'Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação\n- '60' # Crédito Presumido - 'Operação de Aquisição Vinculada Exclusivamente a Receita Tributada no Mercado Interno\n- '61' # Crédito Presumido - 'Operação de Aquisição Vinculada Exclusivamente a Receita Não-Tributada no Mercado Interno\n- '62' # Crédito Presumido - 'Operação de Aquisição Vinculada Exclusivamente a Receita de Exportação\n- '63' # Crédito Presumido - 'Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno\n- '64' # Crédito Presumido - 'Operação de Aquisição Vinculada a Receitas Tributadas no Mercado Interno e de Exportação\n- '65' # Crédito Presumido - 'Operação de Aquisição Vinculada a Receitas Não-Tributadas no Mercado Interno e de Exportação\n- '66' # Crédito Presumido - 'Operação de Aquisição Vinculada a Receitas Tributadas e Não-Tributadas no Mercado Interno, e de Exportação\n- '67' # Crédito Presumido - 'Outras Operações\n- '70' # Operação de Aquisição sem Direito a Crédito\n- '71' # Operação de Aquisição com Isenção\n- '72' # Operação de Aquisição com Suspensão\n- '73' # Operação de Aquisição a Alíquota Zero\n- '74' # Operação de Aquisição sem Incidência da Contribuição\n- '75' # Operação de Aquisição por Substituição Tributária\n- '98' # Outras Operações de Entrada\n- '99' # Outras Operações\n"
    },
    "CSTTableAEnum": {
      "type": "string",
      "enum": [
        "0",
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8"
      ],
      "description": "Source of product or merchandise,\n- '0' # National goods - 'except those treated in codes 3,4, 5 and 8\n- '1' # Imported directly by seller, except those in code 6\n- '2' # Foreign goods - 'Acquired in the internal market (inside Brazil), except those in code 7\n- '3' # Merchandise or goods with imported content above 40% and with less than or equal to 70%\n- '4' # National goods from production following 'standard basic processes' as stablished by legislation (standard basic processes are devised to separate simple assembly from manufaturing processes)\n- '5' # National goods - 'Merchandise or goods with imported content equal or below 40%\n- '6' # Foreign goods - 'Directly imported by Seller, without a National Equivalent as listed by Comex and natural gas\n- '7' # Foreign goods - 'Acquired inside Brazil, without a National Equivalent  as listed by Comex and natural gas\n- '8' # Merchandise or goods with imported content above 70%\n"
    },
    "CSTTableBEnum": {
      "type": "string",
      "enum": [
        "00",
        "10",
        "20",
        "30",
        "40",
        "41",
        "50",
        "51",
        "60",
        "70",
        "90"
      ],
      "description": "Use to determined how the tax is applicable and calculated. It may define and exemption, a tax base reduction, identify that a special rate is applicable (not the rate itself).\n- '00' # Taxed in its totality\n- '10' # Taxed and subject to tax substitution (ICMS ST)\n- '20' # Taxed with Tax Base Reduction\n- '30' # Exempt /Not Taxed and subject to tax Substitution (ICMS#ST)\n- '40' # Tax Exempt\n- '41' # Not Taxed\n- '50' # Taxes Suspended\n- '51' # Taxes Diferred\n- '60' # ICMS Tax already collected through Substituition (ICMS ST)\n- '70' # Taxed with Tax Base Reduction and subject to Tax Subsititution (ICMS ST)\n- '90' # Others\n"
    },
    "ICMSSesonReason": {
      "description": "- '0' # NO ICMS TAX RELIEF\n- '1' # TAXI\n- '3' # AGRICULTURAL PRODUCTION\n- '4' # FLEET OWNERS\n- '5' # DIPLOMATIC MISSIONS\n- '6' # VEHICLE AND MOTORCICLE OF FREE ZONE AREA AND OCIDENTAL AMAZON\n- '7' # SUFRAMA\n- '8' # SALES TO GOVERNMENT\n- '9' # OTHERS\n- '10' # DISABLED PERSON DRIVER\n- '11' # DISABLED PERSON NOT DRIVER\n",
      "type": "string",
      "enum": [
        "0",
        "1",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11"
      ]
    },
    "CalculatedTaxSummaryForGoods": {
      "type": "object",
      "properties": {
        "numberOfLines": {
          "type": "integer",
          "description": "Count of lines"
        },
        "taxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "sum of all line taxed discounts"
        },
        "untaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "sum of all line untaxed discounts"
        },
        "subtotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute"
        },
        "totalTax": {
          "type": "number",
          "format": "double",
          "description": "sum of all line tax attribute"
        },
        "grandTotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute + sum of all line tax attribute not VAT - sum of all line lineTaxedDiscount attribute"
        },
        "taxByType": {
          "type": "object",
          "properties": {
            "icms": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsSt": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsStSd": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsPartOwn": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsPartDest": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsDifaFCP": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsDifaDest": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsDifaRemet": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsDeson": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "icmsCredsn": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "pis": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "pisSt": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "cofins": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "cofinsSt": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "ipi": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "ipiReturned": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "ii": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "iof": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "aproxtribState": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            },
            "aproxtribFed": {
              "$ref": "#/definitions/TaxByTypeSummaryForGoods"
            }
          }
        }
      }
    },
    "ProcessingInfo": {
      "type": "object",
      "properties": {
        "versionId": {
          "type": "string"
        },
        "duration": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "TaxByTypeSummaryForGoods": {
      "type": "object",
      "description": "summary of all taxes",
      "properties": {
        "calcbase": {
          "type": "number",
          "format": "double",
          "description": "sum of all lines calcbase"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "sum of referenced tax value"
        },
        "jurisdictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxByTypeSummaryJurisdictionForGoods"
          }
        }
      }
    },
    "TaxByTypeSummaryJurisdictionForGoods": {
      "properties": {
        "jurisdictionName": {
          "type": "string",
          "description": "Jurisdiction used for calctax amount"
        },
        "jurisdictionType": {
          "type": "string",
          "enum": [
            "City",
            "State",
            "Country"
          ],
          "description": "Type of jurisdiction\n- 'City'\n- 'State'\n- 'Country'\n"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "sum of referenced tax value by jurisdiction"
        }
      }
    },
    "SalesHeaderOut": {
      "allOf": [
        {
          "$ref": "#/definitions/SalesHeaderIn"
        },
        {
          "type": "object",
          "properties": {
            "discriminationOut": {
              "type": "string",
              "maxLength": 2000,
              "minLength": 1,
              "description": "Invoice discrimination, it is discriminationIn plus automatic messages"
            },
            "xml": {
              "type": "string",
              "maxLength": 50000,
              "description": "RPS XML or NFSe XML generated, when the client system doesn't have EDI with government then BR16 return RPS when transaction is created."
            },
            "ediSyncState": {
              "type": "string",
              "enum": [
                "STORED",
                "WAITING APPROVAL",
                "AUTHORIZED",
                "AUTHORIZED with NOTE",
                "ERROR",
                "CANCELED REPLACED",
                "CANCELED",
                "CANCELLATION REQUESTED"
              ],
              "description": "Service sales usually has a EDI integration with government to get Final document or Authorization. This is external process and the integration status is followed by this property.\n- 'STORED'\n- 'WAITING APPROVAL'\n- 'AUTHORIZED'\n- 'AUTHORIZED with NOTE'\n- 'ERROR'\n- 'CANCELED REPLACED'\n- 'CANCELED'\n- 'CANCELLATION REQUESTED'\n"
            },
            "payment": {
              "type": "object",
              "properties": {
                "terms": {
                  "$ref": "#/definitions/PaymentTerms"
                },
                "withholdingMode": {
                  "$ref": "#/definitions/WithholdingMode",
                  "description": "To avoid having to verify multiple attributes from a Invoice at the time of funds collection which subject to Tax Withholding, this attribute will allow a referenced Invoice to be quickly checked for withholdings during the cash transaction. This is an SALES.Transaction attribute to be consisted in the Tax Engine that can be used during the receivable process. The values are enumeration where each letter identify if that tax has been withheld PCC,xxx, PCx, PxC ..."
                },
                "installments": {
                  "type": "array",
                  "description": "installments",
                  "items": {
                    "$ref": "#/definitions/InstallmentComplete"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "SalesLinesOut": {
      "allOf": [
        {
          "$ref": "#/definitions/SalesLinesIn"
        },
        {
          "type": "object",
          "properties": {
            "avalaraGoodsAndServicesType": {
              "type": "string",
              "description": "AGAST CODE for itemCode"
            },
            "lineNetValue": {
              "type": "number",
              "format": "double",
              "description": "This decimal captures the total cost of this line. In its simplest form lineNetValue = (lineAmount - discountTaxable - sum of whithholdings)."
            },
            "cst": {
              "type": "string",
              "maxLength": 2,
              "enum": [
                "01",
                "02",
                "03",
                "04",
                "05",
                "21",
                "22",
                "23",
                "24",
                "25",
                "40"
              ],
              "description": "- '01' # ORIGIN MODE\n- '02' # ORIGIN MODE BUT EXEMPT\n- '03' # ORIGIN MODE BUT IMMUNE\n- '04' # ORIGIN MODE BUT SUSPENDED FOR LEGAL REASON\n- '05' # ORIGIN MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON\n- '21' # DESTINATION MODE\n- '22' # DESTINATION MODE BUT EXEMPT\n- '23' # DESTINATION MODE BUT IMMUNE\n- '24' # DESTINATION MODE BUT SUSPENDED\n- '25' # DESTINATION MODE BUT SUSPENDED\n- '40' # FOREIGN IMMUNE MODE\n"
            },
            "cstRf": {
              "type": "string",
              "maxLength": 2,
              "enum": [
                "61",
                "62",
                "63",
                "64",
                "65",
                "66",
                "67",
                "68",
                "69",
                "70",
                "71",
                "72"
              ],
              "description": "- '61' # WITHHOLD NORMAL MODE\n- '62' # WITHHOLD NORMAL MODE BUT EXEMPT\n- '63' # WITHHOLD NORMAL MODE BUT IMMUNE\n- '64' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR LEGAL REASON\n- '65' # WITHHOLD NORMAL MODE BUT SUSPENDED FOR ADMINISTRATIVE REASON\n- '66' # WITHHOLD FORCED MODE\n- '67' # WITHHOLD FORCED MODE BUT EXEMPT\n- '68' # WITHHOLD FORCED MODE BUT IMMUNE\n- '69' # WITHHOLD FORCED MODE BUT SUSPENDED FOR LEGAL REASON\n- '70' # WITHHOLD FORCED MODE BUT SUSPENDED FOR ADMINISTRATIVE PROCESS\n- '71' # NO WITHHOLD MODE\n- '72' # NO WITHHOLD FOREIGN MODE\n"
            },
            "taxDeductions": {
              "type": "object",
              "properties": {
                "iss": {
                  "type": "number",
                  "format": "double",
                  "description": "Deduction amount not ISS taxable. Example Building material"
                }
              }
            },
            "calculatedTax": {
              "$ref": "#/definitions/SalesCalculatedTax"
            }
          }
        }
      ]
    },
    "SalesCalculatedTaxSummaryForService": {
      "type": "object",
      "required": [
        "taxByType"
      ],
      "properties": {
        "numberOfLines": {
          "type": "integer",
          "description": "Count of lines"
        },
        "subtotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line tax attribute"
        },
        "totalTax": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute"
        },
        "grandTotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute"
        },
        "taxByType": {
          "type": "object",
          "description": "Object with summary of all taxes returned by engine",
          "properties": {
            "pisRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "cofinsRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "csllRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "irrf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "inssRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "pis": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "cofins": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "csll": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "issRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "iss": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "aproxtribCity": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "aproxtribFed": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "irpj": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "inss": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            }
          }
        }
      }
    },
    "InstallmentComplete": {
      "type": "object",
      "required": [
        "documentNumber",
        "date",
        "grossValue"
      ],
      "properties": {
        "documentNumber": {
          "type": "string",
          "description": "DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction"
        },
        "date": {
          "type": "string",
          "description": "installment Due Date"
        },
        "grossValue": {
          "type": "number",
          "format": "double",
          "description": "Intallment amount, fraction of  ∑(lineAmount - lineTaxedDiscount)"
        },
        "netValue": {
          "type": "number",
          "format": "double",
          "description": "net amount due for this installment, grossValue - ∑ (withhold amounts)"
        },
        "withholdingMode": {
          "$ref": "#/definitions/WithholdingMode",
          "description": "Inform if this payment is subject to Pis, Cofins or CSLL"
        },
        "withholdingPIS": {
          "type": "number",
          "format": "double",
          "description": "calculated PIS-RF tax for this payment"
        },
        "withholdingCOFINS": {
          "type": "number",
          "format": "double",
          "description": "calculated COFINS-RF tax for this payment"
        },
        "withholdingCSLL": {
          "type": "number",
          "format": "double",
          "description": "calculated CSLL-RF tax for this payment"
        }
      }
    },
    "PaymentTerms": {
      "type": "integer",
      "enum": [
        0,
        1
      ],
      "description": "0 – cash pagamento à vista\n1 – on terms, pagamento à prazo;\n"
    },
    "SalesHeaderIn": {
      "allOf": [
        {
          "$ref": "#/definitions/HeaderBaseInfo"
        },
        {
          "type": "object",
          "properties": {
            "purchaseOrderNumber": {
              "type": "string",
              "description": "The number of Purchase Order"
            },
            "rpsNumber": {
              "type": "integer",
              "description": "Provisional receipt services, sequencial number maintained by the client application, unique by serie"
            },
            "rpsSerie": {
              "type": "string",
              "description": "set name identifier for rps number sequency.",
              "default": "0"
            },
            "discriminationIn": {
              "type": "string",
              "maxLength": 1000,
              "minLength": 1,
              "description": "Service discrimination, free description about service"
            },
            "entity": {
              "$ref": "#/definitions/SalesEntity"
            },
            "payment": {
              "type": "object",
              "properties": {
                "terms": {
                  "$ref": "#/definitions/PaymentTerms"
                },
                "installments": {
                  "type": "array",
                  "description": "installments",
                  "items": {
                    "$ref": "#/definitions/SalesInstallmentIn"
                  }
                }
              }
            },
            "taxesConfig": {
              "$ref": "#/definitions/SalesTaxesConfig"
            },
            "defaultLocations": {
              "$ref": "#/definitions/SalesDefaultLocations"
            }
          }
        }
      ]
    },
    "WithholdingMode": {
      "type": "string",
      "enum": [
        "xxx",
        "PCC",
        "PCx",
        "PxC",
        "Pxx",
        "xCC",
        "xxC",
        "xCx"
      ],
      "description": "Using the placing reference in PCC for PIS (P), COFINS (C) and COFINS (C).  x = tax is not subject to withholding. \n- 'xxx'\n- 'PCC'\n- 'PCx'\n- 'PxC'\n- 'Pxx'\n- 'xCC'\n- 'xxC'\n- 'xCx'\n"
    },
    "HeaderBaseInfo": {
      "type": "object",
      "required": [
        "transactionType",
        "transactionDate",
        "companyLocation"
      ],
      "properties": {
        "transactionType": {
          "type": "string",
          "enum": [
            "Sale",
            "Purchase",
            "Payment",
            "Receipt"
          ],
          "description": "This string indicates the type of transaction for which tax should be calculated.\n- 'Sale'\n- 'Purchase'\n- 'Payment'\n- 'Receipt'\n"
        },
        "documentCode": {
          "type": "string",
          "description": "This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored"
        },
        "currency": {
          "type": "string",
          "description": "currency code / transactions must be in Brazilian Reais \"BRL\""
        },
        "transactionDate": {
          "type": "string",
          "description": "This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)"
        },
        "taxCalculationDate": {
          "type": "string",
          "description": "accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions."
        },
        "companyLocation": {
          "type": "string",
          "maxLength": 64,
          "description": "This string contains a previously configured company code which may also have codes needed for tax return purposes. These codes are maintained through the customer portal. Main company address identity"
        }
      }
    },
    "SalesEntity": {
      "type": "object",
      "required": [
        "type",
        "taxRegime"
      ],
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 60,
          "description": "SERVICE BUYER NAME OFFICIAL"
        },
        "type": {
          "$ref": "#/definitions/EntityType"
        },
        "email": {
          "type": "string",
          "maxLength": 60,
          "description": "Entity Email"
        },
        "cnpjcpf": {
          "type": "string",
          "pattern": "([!-ÿ]{0}|[!-ÿ]{5,20})?",
          "description": "CNPJ/CPF of Sales Buyer, if CPF pattern is '[0-9]{11}' if CNPJ pattern is '[0-9]{14}'"
        },
        "cityTaxId": {
          "type": "string",
          "maxLength": 15,
          "description": "City Tax ID"
        },
        "stateTaxId": {
          "type": "string",
          "pattern": "[0-9]{2,14}|ISENTO",
          "description": "State Tax ID"
        },
        "suframa": {
          "type": "string",
          "pattern": "[0-9]{8,9}",
          "description": "Suframa ID"
        },
        "phone": {
          "type": "string",
          "pattern": "[0-9]{6,14}",
          "description": "Entity Phone"
        },
        "taxRegime": {
          "$ref": "#/definitions/FederalTaxRegime"
        },
        "specialTaxRegime": {
          "type": "string",
          "enum": [
            "MEM",
            "EST",
            "SPR",
            "COP",
            "MEI",
            "MPP"
          ],
          "description": "Entity Special Tax Regime \n- 'MEM' # Microempresa municipal\n- 'EST' # Estimativa\n- 'SPR' # Sociedade de profissionais\n- 'COP' # Cooperativa\n- 'MEI' # Microempresário Individual (MEI)\n- 'MPP' # Microempresário e Empresa de Pequeno Porte (ME EPP)\n"
        },
        "subjectToSRF1234": {
          "type": "boolean",
          "description": "Companies subject to rule follow same rule of Government"
        },
        "requiredWithholdingISS": {
          "type": "boolean",
          "description": "If Withholding ISS is required, independently the rules applied."
        },
        "adminProcess": {
          "type": "string",
          "maxLength": 30,
          "description": "PROCESS NUMBER TO ISS SUSPENDED FOR ADMINISTRATIVE PROCESS"
        },
        "build": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "maxLength": 15,
              "description": "Business code. Código da obra OBRA"
            },
            "art": {
              "type": "string",
              "maxLength": 15,
              "description": "technical note. Anota\\u00e7\\u00e3o de Responsabilidade T\\u00e9cnica-ART, estabelece que todos os contratos referentes à  execu\\u00e7\\u00e3o de servi\\u00e7os ou obras de Engenharia, Agronomia, Geologia, Geografia ou Meteorologia dever\\u00e3o ser objeto de anota\\u00e7\\u00e3o no Conselho Regional de Engenharia e Agronomia"
            },
            "cei": {
              "type": "string",
              "maxLength": 15,
              "description": "Número CEI da Obra"
            },
            "number": {
              "type": "string",
              "maxLength": 15,
              "description": "Número de Matrícula da Obra"
            }
          }
        }
      }
    },
    "SalesInstallmentIn": {
      "type": "object",
      "required": [
        "documentNumber",
        "date",
        "grossValue"
      ],
      "properties": {
        "documentNumber": {
          "type": "string",
          "description": "DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction"
        },
        "date": {
          "type": "string",
          "description": "installment Due Date"
        },
        "grossValue": {
          "type": "number",
          "format": "double",
          "description": "Intallment value, fraction of  ∑(lineAmount - lineTaxedDiscount)"
        }
      }
    },
    "SalesTaxesConfig": {
      "type": "object",
      "properties": {
        "accruableCOFINSTaxation": {
          "type": "string",
          "enum": [
            "T",
            "N",
            "Z",
            "E",
            "H",
            "S"
          ],
          "description": "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings.\n- 'T' # TAXABLE\n- 'N' # NOT TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'S' # SPECIFIC RATE\n"
        },
        "accruableCSLLTaxation": {
          "type": "string",
          "enum": [
            "T",
            "E"
          ],
          "description": "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. \n- T TAXABLE\n- E EXEMPT\n"
        },
        "accruablePISTaxation": {
          "type": "string",
          "enum": [
            "T",
            "N",
            "Z",
            "E",
            "H",
            "S"
          ],
          "description": "There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. \n- 'T' # TAXABLE\n- 'N' # NOT TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'S' # SPECIFIC RATE\n"
        },
        "accruableCOFINSExempCodeTaxation": {
          "type": "string",
          "pattern": "[0-9]{3}",
          "description": "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption"
        },
        "accruablePISExempCodeTaxation": {
          "type": "string",
          "pattern": "[0-9]{3}",
          "description": "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption"
        },
        "withholdingCOFINS": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings."
        },
        "withholdingCSLL": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings."
        },
        "withholdingIRRF": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings."
        },
        "withholdingPIS": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings."
        },
        "withholdIRRFExemptReasonTaxation": {
          "type": "string",
          "description": "When property withholdingIRRF is false is mandatory inform the reason"
        }
      }
    },
    "SalesDefaultLocations": {
      "type": "object",
      "description": "This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. There can only be one location of a given purpose in the dictionary.",
      "properties": {
        "serviceRendered": {
          "$ref": "#/definitions/ServiceRendered"
        }
      }
    },
    "FederalTaxRegime": {
      "type": "string",
      "enum": [
        "realProfit",
        "estimatedProfit",
        "simplified",
        "simplifiedOverGrossthreshold",
        "simplifiedEntrepreneur",
        "notApplicable",
        "individual"
      ],
      "description": "- Federal tax regime\n- realProfit - REAL PROFIT LUCRO REAL\n- estimatedProfit - ESTIMATED PROFIT / LUCRO PRESUMIDO\n- simplified - SIMPLIFIED - OPTANTE TO SIMPLES\n- simplifiedOverGrossthreshold - OPTANTE DO SIMPLES COM LIMITE DE GROSS REVENUE\n- simplifiedEntrepreneur - SIMPLIFIED ENTREPRENEUR / MEI MICRO EMPREENDEDOR INDIVIDUAL \n- notApplicable - Not Applicable 1 \n- individual - INDIVIDUAL / INDIVIDUO\n"
    },
    "ServiceRendered": {
      "type": "object",
      "description": "Address where the rendered service.",
      "properties": {
        "address": {
          "$ref": "#/definitions/SimpleAddress"
        }
      }
    },
    "SimpleAddress": {
      "title": "Address",
      "anyOf": [
        {
          "type": "object",
          "required": [
            "line1",
            "line2",
            "line3",
            "zipcode",
            "country"
          ],
          "properties": {
            "line1": {
              "type": "string",
              "maxLength": 60,
              "description": "Address"
            },
            "line2": {
              "type": "string",
              "maxLength": 60,
              "description": "Number"
            },
            "line3": {
              "type": "string",
              "maxLength": 60,
              "description": "District"
            },
            "city": {
              "type": "string",
              "maxLength": 60
            },
            "zipcode": {
              "type": "string",
              "description": "Zip Code"
            },
            "state": {
              "type": "string",
              "description": "State Code",
              "pattern": "^([A-Z]{2,3})$"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes"
            }
          }
        },
        {
          "type": "object",
          "required": [
            "line1",
            "line2",
            "line3",
            "zipcode",
            "country"
          ],
          "properties": {
            "line1": {
              "type": "string",
              "maxLength": 60,
              "description": "Address"
            },
            "line2": {
              "type": "string",
              "maxLength": 60,
              "description": "Number"
            },
            "line3": {
              "type": "string",
              "maxLength": 60,
              "description": "District"
            },
            "city": {
              "type": "string",
              "maxLength": 60
            },
            "zipcode": {
              "type": "string",
              "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
              "description": "Brazilian Zip Code"
            },
            "state": {
              "$ref": "#/definitions/StateEnum"
            },
            "country": {
              "type": "string",
              "maxLength": 3,
              "description": "Use ISO 3166-1 alpha-3 codes",
              "default": "BRA"
            }
          }
        },
        {
          "title": "Address",
          "anyOf": [
            {
              "type": "object",
              "required": [
                "line1",
                "line2",
                "line3",
                "zipcode",
                "country"
              ],
              "properties": {
                "line1": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Address"
                },
                "line2": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Number"
                },
                "line3": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "District"
                },
                "city": {
                  "type": "string",
                  "maxLength": 60
                },
                "zipcode": {
                  "type": "string",
                  "description": "Zip Code"
                },
                "state": {
                  "type": "string",
                  "description": "State Code",
                  "pattern": "^([A-Z]{2,3})$"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes"
                }
              }
            },
            {
              "type": "object",
              "required": [
                "line1",
                "line2",
                "line3",
                "zipcode",
                "country"
              ],
              "properties": {
                "line1": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Address"
                },
                "line2": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "Number"
                },
                "line3": {
                  "type": "string",
                  "maxLength": 60,
                  "description": "District"
                },
                "city": {
                  "type": "string",
                  "maxLength": 60
                },
                "zipcode": {
                  "type": "string",
                  "pattern": "^(\\d{8}|\\d{5}\\-\\d{3})$",
                  "description": "Brazilian Zip Code"
                },
                "state": {
                  "$ref": "#/definitions/StateEnum"
                },
                "country": {
                  "type": "string",
                  "maxLength": 3,
                  "description": "Use ISO 3166-1 alpha-3 codes",
                  "default": "BRA"
                }
              }
            }
          ]
        }
      ]
    },
    "SalesCalculatedTax": {
      "type": "object",
      "properties": {
        "taxByType": {
          "$ref": "#/definitions/SalesTaxByType"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "Sum of tax type not VAT (Value Added Tax)"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SalesTaxByTypeDetail"
          }
        }
      }
    },
    "SalesLinesIn": {
      "type": "object",
      "required": [
        "itemCode"
      ],
      "properties": {
        "lineCode": {
          "type": "integer",
          "description": "This string is a unique identifier for this line in the transaction"
        },
        "itemCode": {
          "type": "string",
          "description": "This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU."
        },
        "numberOfItems": {
          "type": "number",
          "format": "double",
          "default": 1,
          "description": "This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1"
        },
        "lineAmount": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems)."
        },
        "itemDescription": {
          "type": "string",
          "description": "This string captures the description of the item represented by this line, will be used LC 116"
        },
        "lineTaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "Conditional discount"
        },
        "lineUntaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "Unconditional discount"
        },
        "withLaborAssignment": {
          "type": "boolean",
          "description": "Service w/labor assignment\nServiço com cessão de mão de obra\n"
        },
        "taxDeductions": {
          "type": "object",
          "properties": {
            "iss": {
              "type": "number",
              "format": "double",
              "description": "Deduction amount not taxable by ISS . Example constructions materials included in a service invoice"
            }
          }
        }
      }
    },
    "SalesTaxByType": {
      "type": "object",
      "description": "Object with summary of all taxes returned by engine",
      "properties": {
        "pisRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofinsRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "csllRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "irrf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "inssRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "pis": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofins": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "csll": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "issRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "iss": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "aproxtribCity": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "aproxtribFed": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "irpj": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "inss": {
          "$ref": "#/definitions/TaxByTypeTax"
        }
      }
    },
    "SalesTaxByTypeDetail": {
      "type": "object",
      "properties": {
        "locationType": {
          "type": "string",
          "description": "This string captures the applicable location type. Location used for calc. Buyer or Seller"
        },
        "jurisdictionName": {
          "type": "string",
          "description": "Jurisdiction used for calctax amount"
        },
        "jurisdictionType": {
          "type": "string",
          "enum": [
            "City",
            "State",
            "Country"
          ],
          "description": "Type of jurisdiction\n- 'City'\n- 'State'\n- 'Country'\n"
        },
        "taxType": {
          "type": "string",
          "enum": [
            "aproxtribCity",
            "aproxtribFed",
            "pis",
            "pisRf",
            "cofins",
            "cofinsRf",
            "csll",
            "csllRf",
            "irrf",
            "inss",
            "inssRf",
            "iss",
            "issRf",
            "irpj"
          ],
          "description": "Tax identificator\n- 'aproxtribCity'\n- 'aproxtribFed'\n- 'pis'\n- 'pisRf'\n- 'cofins'\n- 'cofinsRf'\n- 'csll'\n- 'csllRf'\n- 'irrf'\n- 'inss'\n- 'inssRf'\n- 'iss'\n- 'issRf'\n- 'irpj'\n"
        },
        "rateType": {
          "type": "string",
          "description": "Name of configuration rate"
        },
        "scenario": {
          "type": "string",
          "description": "This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in."
        },
        "subtotalTaxable": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax, calc base"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures the tax rate for this tax.3.00 (3%)"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax"
        },
        "exemptionCode": {
          "type": "string",
          "description": "This string is required if is exempt"
        },
        "significantLocations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address"
        },
        "taxRuleType": {
          "type": "string",
          "enum": [
            "SELLER",
            "BUYER",
            "TRANSACTION",
            "ITEM",
            "TAX",
            "NO_EXEMPTION"
          ],
          "description": "This string with type of rule\n- 'SELLER'\n- 'BUYER'\n- 'TRANSACTION'\n- 'ITEM'\n- 'TAX'\n- 'NO_EXEMPTION'\n"
        }
      }
    },
    "TaxByTypeSummaryForService": {
      "type": "object",
      "description": "summary of all taxes",
      "properties": {
        "tax": {
          "type": "number",
          "format": "double",
          "description": "sum of referenced tax value"
        },
        "jurisdictions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TaxByTypeSummaryJurisdiction"
          }
        }
      }
    },
    "TaxByTypeSummaryJurisdiction": {
      "properties": {
        "jurisdictionName": {
          "type": "string",
          "description": "Jurisdiction used for calctax amount"
        },
        "jurisdictionType": {
          "type": "string",
          "enum": [
            "City",
            "State",
            "Country"
          ],
          "description": "Type of jurisdiction\n- 'City'\n- 'State'\n- 'Country'\n"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "sum of referenced tax value by jurisdiction"
        }
      }
    },
    "PurchaseHeaderOut": {
      "allOf": [
        {
          "$ref": "#/definitions/PurchaseHeaderIn"
        },
        {
          "type": "object",
          "properties": {
            "payment": {
              "type": "object",
              "properties": {
                "terms": {
                  "$ref": "#/definitions/PaymentTerms"
                },
                "withholdingMode": {
                  "$ref": "#/definitions/WithholdingMode"
                },
                "installments": {
                  "type": "array",
                  "description": "installments",
                  "items": {
                    "$ref": "#/definitions/InstallmentComplete"
                  }
                }
              }
            }
          }
        }
      ]
    },
    "PurchaseLinesOut": {
      "allOf": [
        {
          "$ref": "#/definitions/PurchaseLinesIn"
        },
        {
          "type": "object",
          "properties": {
            "avalaraGoodsAndServicesType": {
              "type": "string",
              "description": "AGAST CODE for itemCode"
            },
            "lineNetValue": {
              "type": "number",
              "format": "double",
              "description": "This decimal captures the value of lineAmount - lineTaxedDiscount - sum of withholding."
            },
            "calculatedTax": {
              "$ref": "#/definitions/PurchaseCalculatedTax"
            }
          }
        }
      ]
    },
    "PurchaseCalculatedTaxSummaryForService": {
      "type": "object",
      "properties": {
        "numberOfLines": {
          "type": "integer",
          "description": "Count of lines"
        },
        "subtotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line tax attribute"
        },
        "totalTax": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute"
        },
        "grandTotal": {
          "type": "number",
          "format": "double",
          "description": "sum of all line lineAmount attribute - sum of all line tax attribute - sum of all line lineTaxedDiscount attribute"
        },
        "taxByType": {
          "type": "object",
          "description": "Object with summary of all taxes returned by engine",
          "properties": {
            "issRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "pisRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "cofinsRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "csllRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "irrf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "inssRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "inssAr": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "pis": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "cofins": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            }
          }
        }
      }
    },
    "PurchaseHeaderIn": {
      "allOf": [
        {
          "$ref": "#/definitions/HeaderBaseInfo"
        },
        {
          "type": "object",
          "properties": {
            "purchaseOrderNumber": {
              "type": "string",
              "description": "The number of Purchase Order"
            },
            "entity": {
              "$ref": "#/definitions/PurchaseEntity"
            },
            "payment": {
              "type": "object",
              "properties": {
                "terms": {
                  "$ref": "#/definitions/PaymentTerms"
                },
                "installments": {
                  "type": "array",
                  "description": "installments",
                  "items": {
                    "$ref": "#/definitions/PurchaseInstallmentIn"
                  }
                }
              }
            },
            "taxesConfig": {
              "$ref": "#/definitions/PurchaseTaxesConfig"
            },
            "defaultLocations": {
              "$ref": "#/definitions/PurchaseDefaultLocations"
            }
          }
        }
      ]
    },
    "PurchaseEntity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "maxLength": 60,
          "description": "Legal Name of Service buyer."
        },
        "type": {
          "$ref": "#/definitions/EntityType"
        },
        "email": {
          "type": "string",
          "maxLength": 60,
          "description": "Entity Email"
        },
        "cnpjcpf": {
          "type": "string",
          "pattern": "([!-ÿ]{0}|[!-ÿ]{5,20})?",
          "description": "CNPJ/CPF of Sales Buyer. If CPF, pattern is '[0-9]{11}' if CNPJ, pattern is '[0-9]{14}'"
        },
        "cityTaxId": {
          "type": "string",
          "maxLength": 15,
          "description": "City Tax ID"
        },
        "stateTaxId": {
          "type": "string",
          "pattern": "[0-9]{2,14}|ISENTO",
          "description": "State Tax ID"
        },
        "suframa": {
          "type": "string",
          "pattern": "[0-9]{8,9}",
          "description": "Suframa ID"
        },
        "phone": {
          "type": "string",
          "pattern": "[0-9]{6,14}",
          "description": "Entity Phone"
        },
        "taxRegime": {
          "$ref": "#/definitions/FederalTaxRegime"
        },
        "hasCpom": {
          "type": "boolean",
          "description": "Some cities require PURCHASE.Buyers to withhold ISS (City Tax) from PURCHASE.Sellers stablished in different cities. In case the PURCHASE.Seller has acquired a Tax Registration in this destination city, by providing this information in the service invoice, this withholding obligation is lifted."
        },
        "subjectWithholdingIrrf": {
          "type": "boolean",
          "description": "These are the federal taxes attributes that determine whether withholding of taxes should take place. In special cases where the PURCHASE.Seller is exempt of one or more of these taxes the withholding follows the same rules. The Business type may also dictate these rules as well."
        },
        "inssPreviousContrib": {
          "type": "number",
          "format": "double",
          "description": "The INSS contribution is capped at a maximum limit (amount of actual retired payment available in the country).  Individuals sellers subject to INSS withholding can provide the amount already tax by other transactions (with the same buyer or different ones) to deduct to the tax basis. This amount is to be provided to the Seller in a form of a signed document."
        },
        "inssBasisDiscount": {
          "type": "number",
          "format": "double",
          "description": "The INSS contribution is applicable only to the labor amount in a service contract.  There are several items that may be deducted from the service invoice total to arrive at the INSS taxable amount. This amount is to be provided to the Seller in the body of the Invoice or calculated during the transaction input."
        },
        "issRfRate": {
          "type": "number",
          "format": "double",
          "description": "When Seller is Simples regime, the seller needs send RF rate."
        }
      }
    },
    "PurchaseInstallmentIn": {
      "type": "object",
      "required": [
        "documentNumber",
        "date",
        "grossValue"
      ],
      "properties": {
        "documentNumber": {
          "type": "string",
          "description": "DOCNUMBER, ID OF THIS DOCUMENT FOR THIS transaction"
        },
        "date": {
          "type": "string",
          "description": "installment, Due Date"
        },
        "grossValue": {
          "type": "number",
          "format": "double",
          "description": "Intallment value, fraction of  ∑(lineAmount - lineTaxedDiscount)"
        }
      }
    },
    "PurchaseTaxesConfig": {
      "type": "object",
      "properties": {
        "entityAccruableCOFINSTaxation": {
          "type": "string",
          "enum": [
            "T",
            "N",
            "Z",
            "E",
            "H",
            "S"
          ],
          "description": "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE\n- 'T' # TAXABLE\n- 'N' # NOT TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'S' # SPECIFIC RATE\n",
          "default": "T"
        },
        "entityAccruableCSLLTaxation": {
          "type": "string",
          "enum": [
            "T",
            "E"
          ],
          "description": "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be CSLL exempt.  \nThis attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. \n- T TAXABLE\n- E EXEMPT\n",
          "default": "T"
        },
        "entityAccruablePISTaxation": {
          "type": "string",
          "enum": [
            "T",
            "N",
            "Z",
            "E",
            "H",
            "S"
          ],
          "description": "ATTENTION SELLER POINT OF VIEW. There are cases where both Seller, Buyer and items are taxable but a special situation still exists that forces the transaction to be exempt specially for PIS and COFINS.  This attribute will allow users to identify such scenarios and trigger the exemption in spite of all other settings. T TAXABLE, N NOT TAXABLE, Z TAXABLE WITH RATE=0.00, E EXEMPT, H SUSPENDED, S SPECIFIC RATE\n- 'T' # TAXABLE\n- 'N' # NOT TAXABLE\n- 'Z' # TAXABLE WITH RATE=0.00\n- 'E' # EXEMPT\n- 'H' # SUSPENDED\n- 'S' # SPECIFIC RATE\n",
          "default": "T"
        },
        "accruableCOFINSExempCodeTaxation": {
          "type": "string",
          "pattern": "([0-9]{3})?",
          "description": "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code."
        },
        "accruablePISExempCodeTaxation": {
          "type": "string",
          "pattern": "([0-9]{3})?",
          "description": "This is a code available by Receita Federal for reason of the exemption, When Code is 999 the User system need send the custom reason to Exemption. When not Taxable of Seller point of view this field has the reason code."
        },
        "accruablePISExemptReasonTaxation": {
          "type": "string",
          "description": "When Code is 999 the user system need send the custom reason to Exemption"
        },
        "accruableCOFINSExemptReasonTaxation": {
          "type": "string",
          "description": "When Code is 999 the user system need send the custom reason to Exemption"
        },
        "accruableCSLLExemptReasonTaxation": {
          "type": "string",
          "description": "CSLL no withholding Custom Reason"
        },
        "withholdingPIS": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.",
          "default": true
        },
        "withholdingCOFINS": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.",
          "default": true
        },
        "withholdingCSLL": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.",
          "default": true
        },
        "withholdingIRRF": {
          "type": "boolean",
          "description": "Support Buyer Tax Liability identifier for Federal Withholding Taxes. Each buyer may be subject/liable to withhold the following taxes independent to one another. The seller must be able to inform which Tax impacts the transaction based on a direct equivalency in the service item accrual. i.e. (The service item must be taxed by a given tax and the buyer must liable for the same tax withholding in order for the transaction to be taxable). To differentiate from the accrued taxes under the same acronyms the withholding taxes are followed by WH (this is a convention created for the sake of understanding and communicating the requirements. If false spite of all other settings.",
          "default": true
        },
        "withholdCOFINSExemptReasonTaxation": {
          "type": "string",
          "description": "COFINS no withholding Custom Reason"
        },
        "withholdCSLLExemptReasonTaxation": {
          "type": "string",
          "description": "CSLL no withholding Custom Reason"
        },
        "withholdPISExemptReasonTaxation": {
          "type": "string",
          "description": "PIS no withholding Custom Reason"
        }
      }
    },
    "PurchaseDefaultLocations": {
      "type": "object",
      "description": "This element contains a dictionary of locations such as the origin and destination addresses to be associated with this transaction. There can only be one location of a given purpose in the dictionary.",
      "properties": {
        "PointOfOrderOrigin": {
          "$ref": "#/definitions/PointOfOrderOrigin"
        }
      }
    },
    "PointOfOrderOrigin": {
      "type": "object",
      "description": "Address where the service is rendered.",
      "properties": {
        "address": {
          "$ref": "#/definitions/SimpleAddress"
        }
      }
    },
    "PurchaseCalculatedTax": {
      "type": "object",
      "properties": {
        "taxByType": {
          "$ref": "#/definitions/PurchaseTaxByType"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "Sum of tax type not VAT (Value Added Tax)"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PurchaseTaxByTypeDetail"
          }
        }
      }
    },
    "PurchaseLinesIn": {
      "type": "object",
      "properties": {
        "lineCode": {
          "type": "integer",
          "description": "This string is a unique identifier for this line in the transaction"
        },
        "itemCode": {
          "type": "string",
          "description": "This string is a code maintained by the client application to uniquely identify a product or service. It will likely be a SKU."
        },
        "agast": {
          "type": "object",
          "description": "This structure is mandatory when doesn't have itemCode (SKU), usually the companies doesn't have the services to buy mapped.\nOptionally teh service can be consumed sending serviceAgast and the service code on the company city\n",
          "required": [
            "serviceAgast"
          ],
          "properties": {
            "serviceAgast": {
              "type": "string",
              "description": "Service Agast code for this ite, the Service AGAST code has Federal Jurisdiction"
            },
            "serviceCode": {
              "type": "string",
              "description": "Company city code service      \nWhen this information isn't available the rates for ISS are zero.\n"
            }
          }
        },
        "numberOfItems": {
          "type": "number",
          "format": "double",
          "default": 1,
          "description": "This decimal captures the number of individual items or units represented by this line. Digits after the decimal point are optional. This should always be positive. Quantity, default 1"
        },
        "lineAmount": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures the total cost of this line. In its simplest form lineAmount = (item price * numberOfItems)."
        },
        "itemDescription": {
          "type": "string",
          "description": "This string captures the description of the item represented by this line, will be used LC 116"
        },
        "lineTaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "Conditional discount"
        },
        "lineUntaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "Unconditional discount"
        },
        "withLaborAssignment": {
          "type": "boolean",
          "description": "Service w/labor assignment\nServiço com cessão de mão de obra\n"
        },
        "useType": {
          "type": "string",
          "enum": [
            "resale",
            "production",
            "use or consumption",
            "fixed assets"
          ],
          "description": "Type of entity use associated with this line\n- 'resale'\n- 'production'\n- 'use or consumption'\n- 'fixed assets'\n"
        },
        "taxDeductions": {
          "type": "object",
          "properties": {
            "iss": {
              "type": "number",
              "format": "double",
              "description": "Deduction amount not ISS taxable. Example Building material"
            }
          }
        }
      }
    },
    "PurchaseTaxByType": {
      "type": "object",
      "description": "Object with summary of all taxes returned by engine",
      "properties": {
        "issRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "pisRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofinsRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "csllRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "irrf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "inssRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "inssAr": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "pis": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofins": {
          "$ref": "#/definitions/TaxByTypeTax"
        }
      }
    },
    "PurchaseTaxByTypeDetail": {
      "type": "object",
      "properties": {
        "locationType": {
          "type": "string",
          "description": "This string captures the applicable location type. Location used for calc. Buyer or Seller"
        },
        "jurisdictionName": {
          "type": "string",
          "description": "Jurisdiction used for calctax amount"
        },
        "jurisdictionType": {
          "type": "string",
          "enum": [
            "City",
            "State",
            "Country"
          ],
          "description": "Type of jurisdiction\n- 'City'\n- 'State'\n- 'Country'\n"
        },
        "taxType": {
          "type": "string",
          "enum": [
            "pis",
            "pisRf",
            "cofins",
            "cofinsRf",
            "csll",
            "csllRf",
            "irrf",
            "inssAr",
            "inssRf",
            "issRf"
          ],
          "description": "Tax identificator\n- 'pis'\n- 'pisRf'\n- 'cofins'\n- 'cofinsRf'\n- 'csll'\n- 'csllRf'\n- 'irrf'\n- 'inssAr'\n- 'inssRf'\n- 'issRf'\n"
        },
        "rateType": {
          "type": "string",
          "description": "Name of configuration rate"
        },
        "scenario": {
          "type": "string",
          "description": "This string captures the transaction scenario used to calculate the tax for this tax type. Scenarios are specific to the tax type. This field provides information about how the tax engine interpreted the transaction information that was passed in."
        },
        "subtotalTaxable": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax, calc base"
        },
        "rate": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures the tax rate for this tax.3.00 (3%)"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "This decimal captures how much of the lineAmount was taxable by this tax"
        },
        "exemptionCode": {
          "type": "string",
          "description": "This string is required if is exempt"
        },
        "significantLocations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "This element captures the list of locations that contributed to the tax determination. for BR16 Service is Buyer and Seller Address"
        },
        "taxRuleType": {
          "type": "string",
          "enum": [
            "SELLER",
            "BUYER",
            "TRANSACTION",
            "ITEM",
            "TAX"
          ],
          "description": "This string with type of rule\n- 'SELLER'\n- 'BUYER'\n- 'TRANSACTION'\n- 'ITEM'\n- 'TAX'\n"
        }
      }
    },
    "PayRecHeader": {
      "type": "object",
      "required": [
        "transactionType",
        "transactionDate",
        "paymentMode"
      ],
      "properties": {
        "transactionType": {
          "type": "string",
          "enum": [
            "Sale",
            "Purchase",
            "Payment",
            "Receipt"
          ],
          "description": "This string indicates the type of transaction for which tax should be calculated.\n- 'Sale'\n- 'Purchase'\n- 'Payment'\n- 'Receipt'\n"
        },
        "documentCode": {
          "type": "string",
          "description": "This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc. When has this field, the transaction will be stored"
        },
        "currency": {
          "type": "string",
          "description": "currency code. 'BRL' for Brazilian Reais."
        },
        "transactionDate": {
          "type": "string",
          "description": "This string is the transaction date in ISO 8601 format (which may be different from the date the tax calculation is performed)"
        },
        "taxCalculationDate": {
          "type": "string",
          "description": "accrual date, This string is the date, in ISO 8601 format, on which tax is to be calculated for this transaction (normally tax is calculated on the date the transaction is performed as captured in the transactionDate field). This is useful for layaways and other deferred transactions."
        },
        "paymentMode": {
          "type": "string",
          "enum": [
            "CALCULATE",
            "ASIS"
          ],
          "description": "- 'CALCULATE'\n- 'ASIS'\nWhen ASIS, the transaction is stored without executing tax determination (no Calculation).\n"
        }
      }
    },
    "PayRecLinesOut": {
      "allOf": [
        {
          "$ref": "#/definitions/PayRecLinesIn"
        },
        {
          "type": "object",
          "properties": {
            "lineAmount": {
              "type": "number",
              "format": "double",
              "description": "GrossAmount of this installment line"
            },
            "lineNetValue": {
              "type": "number",
              "format": "double",
              "description": "Net value, the net Value is Gross value plus penalty minus sum of discount and withhold taxes"
            },
            "withholdingMode": {
              "$ref": "#/definitions/WithholdingMode",
              "description": "x is because not subject of this tax independent of Threshold"
            },
            "calculatedTax": {
              "$ref": "#/definitions/PaymentCalculatedTax"
            }
          }
        }
      ]
    },
    "PayRecCalculatedTaxSummaryForService": {
      "type": "object",
      "properties": {
        "numberOfLines": {
          "type": "integer",
          "description": "Count of lines"
        },
        "subtotal": {
          "type": "number",
          "format": "double",
          "description": "Sum of grossvalues"
        },
        "totalTax": {
          "type": "number",
          "format": "double",
          "description": "Sum of all withholding values"
        },
        "grandTotal": {
          "type": "number",
          "format": "double",
          "description": "Sum all NetValues"
        },
        "pccWithholdingModes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/PccWithholdingMode"
          }
        },
        "taxByType": {
          "type": "object",
          "description": "Object with summary of all taxes returned by engine",
          "properties": {
            "issRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "pisRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "cofinsRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "csllRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "irrf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            },
            "inssRf": {
              "$ref": "#/definitions/TaxByTypeSummaryForService"
            }
          }
        }
      }
    },
    "PaymentCalculatedTax": {
      "type": "object",
      "description": "Structure with value for each tax withhold value of this line",
      "properties": {
        "taxByType": {
          "$ref": "#/definitions/PaymentTaxByType"
        },
        "tax": {
          "type": "number",
          "format": "double",
          "description": "Sum of tax type not VAT (Value Added Tax)"
        }
      }
    },
    "PayRecLinesIn": {
      "type": "object",
      "required": [
        "itemCode"
      ],
      "properties": {
        "lineCode": {
          "type": "integer",
          "description": "Installment number in this document"
        },
        "lineType": {
          "type": "string",
          "enum": [
            "installment"
          ]
        },
        "itemCode": {
          "type": "string",
          "description": "Bill transaction code This string is a code maintained by the client application to uniquely identify a document in the client's systems. It will typically be an invoice number, sales order, receipt number, returned merchandise authorization number, etc."
        },
        "itemDescription": {
          "type": "string",
          "description": "Free description about this payment"
        },
        "itemDocNumber": {
          "type": "string",
          "description": "Installment number, when paid AS IS"
        },
        "lineUntaxedPenality": {
          "type": "number",
          "format": "double",
          "description": "Penalty, usually because paid after due date"
        },
        "lineUntaxedDiscount": {
          "type": "number",
          "format": "double",
          "description": "unconditional discounts"
        }
      }
    },
    "PaymentTaxByType": {
      "type": "object",
      "description": "Object with summary of all taxes returned by engine",
      "properties": {
        "irrf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "inssRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "issRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "pisRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofinsRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "csllRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        }
      }
    },
    "PccWithholdingMode": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "CSRF",
            "individual"
          ],
          "description": "Inform if this group of tax are calculated considering the threashold by PCC or Individualy (each tax separately)"
        },
        "totalTax": {
          "type": "number",
          "format": "double",
          "description": "this attribute occurs only for CSRF type, When CRSF mode, this is sum of pisRf, CofinsRf and CsllRf"
        },
        "pisRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "cofinsRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        },
        "csllRf": {
          "$ref": "#/definitions/TaxByTypeTax"
        }
      }
    },
    "PaymentLinesIn": {
      "allOf": [
        {
          "$ref": "#/definitions/PayRecLinesIn"
        },
        {
          "type": "object",
          "properties": {
            "lineNetValue": {
              "type": "number",
              "format": "double",
              "description": "Net value, the net Value is Gross value plus penalty minus sum of discount and withhold taxes"
            }
          }
        }
      ]
    }
  },
  "x-swagger-erouter-validation-rules": {
    "/calculations/*": {
      "in": "body",
      "field": "header.messageType",
      "rules": {
        "goods": {
          "field": "header.transactionType",
          "rules": {
            "_default": "/calculations/*?goods"
          }
        },
        "_default": {
          "field": "header.transactionType",
          "rules": {
            "Purchase": "/calculations/*?service-purchase",
            "Payment": "/calculations/*?service-payment",
            "Receipt": "/calculations/*?service-receipt",
            "_default": "/calculations/*?service-sales"
          }
        }
      }
    }
  }
}